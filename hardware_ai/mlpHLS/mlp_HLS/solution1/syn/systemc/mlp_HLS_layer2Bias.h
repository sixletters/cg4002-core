// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
// Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __mlp_HLS_layer2Bias_H__
#define __mlp_HLS_layer2Bias_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct mlp_HLS_layer2Bias_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 112;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(mlp_HLS_layer2Bias_ram) {
        ram[0] = "0b00111011101111000111001101100110";
        ram[1] = "0b10111100101101100000101101010011";
        ram[2] = "0b10111100110001111011001000100010";
        ram[3] = "0b10111101011000100110010100101001";
        ram[4] = "0b00111100111111101010011011100111";
        ram[5] = "0b00111100110001100001001110101011";
        ram[6] = "0b10111100011101110101110111111110";
        ram[7] = "0b00111011011100001100011101011101";
        ram[8] = "0b00111100001100100001111101100001";
        ram[9] = "0b10111100100010001110101111010010";
        ram[10] = "0b10111100110111110001110110010011";
        ram[11] = "0b00111100101110111010011001010100";
        ram[12] = "0b10111100101000001011111010011111";
        ram[13] = "0b10111010110100000110001100110001";
        ram[14] = "0b00111100010011000111010010010100";
        ram[15] = "0b10111100110100111100100111011101";
        ram[16] = "0b00111010001001110101101101010101";
        ram[17] = "0b10111100000100111100111011011011";
        ram[18] = "0b00111100101000000100010010110001";
        ram[19] = "0b10111011111011011011101110000010";
        ram[20] = "0b10111101000000110000001110110010";
        ram[21] = "0b00111011001001011101110010100101";
        ram[22] = "0b00111011100001001110101000000110";
        ram[23] = "0b10111100100111101011010110101101";
        ram[24] = "0b00111100001100100010011110111111";
        ram[25] = "0b10111011110010001110011000100011";
        ram[26] = "0b10111100000000101101100011011110";
        ram[27] = "0b00111100110111111100000011111100";
        ram[28] = "0b10111011111100111111110010000101";
        ram[29] = "0b10111100101111000000000001100001";
        ram[30] = "0b10111101000101001110101011011111";
        ram[31] = "0b00111001011000111110000111101100";
        ram[32] = "0b00111011100001000111011111110011";
        ram[33] = "0b00111100100111101011101110111110";
        ram[34] = "0b10111100101110100011001001000011";
        ram[35] = "0b10111011110111011010100110001001";
        ram[36] = "0b10111101010011010100100011000101";
        ram[37] = "0b00111011110001101010010000111111";
        ram[38] = "0b10111011101001110100100101101111";
        ram[39] = "0b10111100101101000111010110010100";
        ram[40] = "0b00111100010001001100000000101001";
        ram[41] = "0b00111100001010011110000011101101";
        ram[42] = "0b10111100110111111110100011111010";
        ram[43] = "0b10111100111001011001111011100101";
        ram[44] = "0b10111101000111011010000011010011";
        ram[45] = "0b00000000000000000000000000000000";
        ram[46] = "0b10111100101111010100000011110010";
        ram[47] = "0b00111100111111010100101110110011";
        ram[48] = "0b10111100111000000111111111011000";
        ram[49] = "0b00111100100101101110000110101001";
        ram[50] = "0b10111100010101001011101001010010";
        ram[51] = "0b00111100110111111001101001001100";
        ram[52] = "0b00111100110000010000110110100111";
        ram[53] = "0b10111011111010110010010011111100";
        ram[54] = "0b10111100111010110100101001001000";
        ram[55] = "0b10111100101100001001000000010001";
        ram[56] = "0b10111101000011101101000100000111";
        ram[57] = "0b00111100010000000000001010010011";
        ram[58] = "0b10111100100101011100001000001011";
        ram[59] = "0b10111100011010101101100010100101";
        ram[60] = "0b10111100011010110011111011110010";
        ram[61] = "0b10111100010110010111011011110001";
        ram[62] = "0b10111100101100111000011000111010";
        ram[63] = "0b10111100101011101100001100101011";
        ram[64] = "0b00000000000000000000000000000000";
        ram[65] = "0b10111101000011101011111011000101";
        ram[66] = "0b10111100010110111111001100010000";
        ram[67] = "0b00000000000000000000000000000000";
        ram[68] = "0b10111100010010101000000000101001";
        ram[69] = "0b10111011000111010110111111110101";
        ram[70] = "0b10111100001110100110111000000100";
        ram[71] = "0b00111100100111111100010110101011";
        ram[72] = "0b10111011101001101101000101111110";
        ram[73] = "0b00111011100010111001101010001100";
        ram[74] = "0b00111100001000010101010100101110";
        ram[75] = "0b00000000000000000000000000000000";
        ram[76] = "0b00111101000000001111101100010011";
        ram[77] = "0b10111100110011101100000011001110";
        ram[78] = "0b00111100000111001100110011111000";
        ram[79] = "0b10111011111100010111111101110110";
        ram[80] = "0b00111101000011111011100001000001";
        ram[81] = "0b10111100000010111100110100011011";
        ram[82] = "0b00111011111101011101100100100001";
        ram[83] = "0b10111100000011011001010001000101";
        ram[84] = "0b00111100000001000001001000101001";
        ram[85] = "0b10111100011000010110001110011011";
        ram[86] = "0b10111100110010001010100011111000";
        ram[87] = "0b00111100101010100101000111100000";
        ram[88] = "0b10111100101011000001001101111100";
        ram[89] = "0b00111001110110101001010000100110";
        ram[90] = "0b10111101010001110000010011010001";
        ram[91] = "0b00111100011111000010111011011010";
        ram[92] = "0b00111100010000111101110001010000";
        ram[93] = "0b10111101000010101100001111000101";
        ram[94] = "0b10111100110100101001111010010111";
        ram[95] = "0b10111100111000000010010111111111";
        ram[96] = "0b00111100011010000101011011001001";
        ram[97] = "0b10111100101010110000100110011001";
        ram[98] = "0b10111100001100100111001101101010";
        ram[99] = "0b00111010110101100011111101100011";
        ram[100] = "0b10111101000010111111101100111001";
        ram[101] = "0b00111100110010000101101000001001";
        ram[102] = "0b10111011001100100100110000011000";
        ram[103] = "0b10111100111100111010110110001001";
        ram[104] = "0b10111100101111101010000001110011";
        ram[105] = "0b00111011001001001000000110101001";
        ram[106] = "0b10111100111100110001111001000110";
        ram[107] = "0b10111000101010001000011000110010";
        ram[108] = "0b10111100000010000001010100001110";
        ram[109] = "0b10111100000100001011010100001110";
        ram[110] = "0b10111010111100010011111000100110";
        ram[111] = "0b10111100110001101000100101001110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(mlp_HLS_layer2Bias) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 112;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


mlp_HLS_layer2Bias_ram* meminst;


SC_CTOR(mlp_HLS_layer2Bias) {
meminst = new mlp_HLS_layer2Bias_ram("mlp_HLS_layer2Bias_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~mlp_HLS_layer2Bias() {
    delete meminst;
}


};//endmodule
#endif
