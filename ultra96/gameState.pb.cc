// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameState.proto

#include "gameState.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR gameState_playerState::gameState_playerState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.bullets_)*/0
  , /*decltype(_impl_.grenades_)*/0
  , /*decltype(_impl_.shield_time_)*/0
  , /*decltype(_impl_.shield_health_)*/0
  , /*decltype(_impl_.num_deaths_)*/0
  , /*decltype(_impl_.num_shield_)*/0} {}
struct gameState_playerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR gameState_playerStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~gameState_playerStateDefaultTypeInternal() {}
  union {
    gameState_playerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 gameState_playerStateDefaultTypeInternal _gameState_playerState_default_instance_;
PROTOBUF_CONSTEXPR gameState::gameState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.p1_)*/nullptr
  , /*decltype(_impl_.p2_)*/nullptr} {}
struct gameStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR gameStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~gameStateDefaultTypeInternal() {}
  union {
    gameState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 gameStateDefaultTypeInternal _gameState_default_instance_;
static ::_pb::Metadata file_level_metadata_gameState_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_gameState_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_gameState_2eproto = nullptr;

const uint32_t TableStruct_gameState_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gameState_playerState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::gameState_playerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gameState_playerState, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::gameState_playerState, _impl_.bullets_),
  PROTOBUF_FIELD_OFFSET(::gameState_playerState, _impl_.grenades_),
  PROTOBUF_FIELD_OFFSET(::gameState_playerState, _impl_.shield_time_),
  PROTOBUF_FIELD_OFFSET(::gameState_playerState, _impl_.shield_health_),
  PROTOBUF_FIELD_OFFSET(::gameState_playerState, _impl_.num_deaths_),
  PROTOBUF_FIELD_OFFSET(::gameState_playerState, _impl_.num_shield_),
  PROTOBUF_FIELD_OFFSET(::gameState_playerState, _impl_.action_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::gameState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::gameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gameState, _impl_.p1_),
  PROTOBUF_FIELD_OFFSET(::gameState, _impl_.p2_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::gameState_playerState)},
  { 22, 30, -1, sizeof(::gameState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_gameState_playerState_default_instance_._instance,
  &::_gameState_default_instance_._instance,
};

const char descriptor_table_protodef_gameState_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017gameState.proto\"\366\001\n\tgameState\022\"\n\002p1\030\001 "
  "\002(\0132\026.gameState.playerState\022\"\n\002p2\030\002 \002(\0132"
  "\026.gameState.playerState\032\240\001\n\013playerState\022"
  "\n\n\002hp\030\001 \002(\005\022\017\n\007bullets\030\002 \002(\005\022\020\n\010grenades"
  "\030\003 \002(\005\022\023\n\013shield_time\030\004 \002(\002\022\025\n\rshield_he"
  "alth\030\005 \002(\005\022\022\n\nnum_deaths\030\006 \002(\005\022\022\n\nnum_sh"
  "ield\030\007 \002(\005\022\016\n\006action\030\010 \002(\t"
  ;
static ::_pbi::once_flag descriptor_table_gameState_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_gameState_2eproto = {
    false, false, 266, descriptor_table_protodef_gameState_2eproto,
    "gameState.proto",
    &descriptor_table_gameState_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_gameState_2eproto::offsets,
    file_level_metadata_gameState_2eproto, file_level_enum_descriptors_gameState_2eproto,
    file_level_service_descriptors_gameState_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gameState_2eproto_getter() {
  return &descriptor_table_gameState_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gameState_2eproto(&descriptor_table_gameState_2eproto);

// ===================================================================

class gameState_playerState::_Internal {
 public:
  using HasBits = decltype(std::declval<gameState_playerState>()._impl_._has_bits_);
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bullets(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_grenades(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shield_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shield_health(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_num_shield(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

gameState_playerState::gameState_playerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gameState.playerState)
}
gameState_playerState::gameState_playerState(const gameState_playerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  gameState_playerState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.action_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.bullets_){}
    , decltype(_impl_.grenades_){}
    , decltype(_impl_.shield_time_){}
    , decltype(_impl_.shield_health_){}
    , decltype(_impl_.num_deaths_){}
    , decltype(_impl_.num_shield_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_action()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.hp_, &from._impl_.hp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_shield_) -
    reinterpret_cast<char*>(&_impl_.hp_)) + sizeof(_impl_.num_shield_));
  // @@protoc_insertion_point(copy_constructor:gameState.playerState)
}

inline void gameState_playerState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.action_){}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.bullets_){0}
    , decltype(_impl_.grenades_){0}
    , decltype(_impl_.shield_time_){0}
    , decltype(_impl_.shield_health_){0}
    , decltype(_impl_.num_deaths_){0}
    , decltype(_impl_.num_shield_){0}
  };
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

gameState_playerState::~gameState_playerState() {
  // @@protoc_insertion_point(destructor:gameState.playerState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void gameState_playerState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.action_.Destroy();
}

void gameState_playerState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void gameState_playerState::Clear() {
// @@protoc_insertion_point(message_clear_start:gameState.playerState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.action_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.hp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_shield_) -
        reinterpret_cast<char*>(&_impl_.hp_)) + sizeof(_impl_.num_shield_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* gameState_playerState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 hp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hp(&has_bits);
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 bullets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bullets(&has_bits);
          _impl_.bullets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 grenades = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_grenades(&has_bits);
          _impl_.grenades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float shield_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_shield_time(&has_bits);
          _impl_.shield_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required int32 shield_health = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_shield_health(&has_bits);
          _impl_.shield_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 num_deaths = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_num_deaths(&has_bits);
          _impl_.num_deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 num_shield = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_num_shield(&has_bits);
          _impl_.num_shield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string action = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "gameState.playerState.action");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* gameState_playerState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameState.playerState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 hp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_hp(), target);
  }

  // required int32 bullets = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bullets(), target);
  }

  // required int32 grenades = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_grenades(), target);
  }

  // required float shield_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_shield_time(), target);
  }

  // required int32 shield_health = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_shield_health(), target);
  }

  // required int32 num_deaths = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_num_deaths(), target);
  }

  // required int32 num_shield = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_num_shield(), target);
  }

  // required string action = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gameState.playerState.action");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameState.playerState)
  return target;
}

size_t gameState_playerState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gameState.playerState)
  size_t total_size = 0;

  if (_internal_has_action()) {
    // required string action = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  if (_internal_has_hp()) {
    // required int32 hp = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  if (_internal_has_bullets()) {
    // required int32 bullets = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bullets());
  }

  if (_internal_has_grenades()) {
    // required int32 grenades = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grenades());
  }

  if (_internal_has_shield_time()) {
    // required float shield_time = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_shield_health()) {
    // required int32 shield_health = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shield_health());
  }

  if (_internal_has_num_deaths()) {
    // required int32 num_deaths = 6;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_deaths());
  }

  if (_internal_has_num_shield()) {
    // required int32 num_shield = 7;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_shield());
  }

  return total_size;
}
size_t gameState_playerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameState.playerState)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string action = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());

    // required int32 hp = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());

    // required int32 bullets = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bullets());

    // required int32 grenades = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grenades());

    // required float shield_time = 4;
    total_size += 1 + 4;

    // required int32 shield_health = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shield_health());

    // required int32 num_deaths = 6;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_deaths());

    // required int32 num_shield = 7;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_shield());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData gameState_playerState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    gameState_playerState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*gameState_playerState::GetClassData() const { return &_class_data_; }


void gameState_playerState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<gameState_playerState*>(&to_msg);
  auto& from = static_cast<const gameState_playerState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gameState.playerState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_action(from._internal_action());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.hp_ = from._impl_.hp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bullets_ = from._impl_.bullets_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.grenades_ = from._impl_.grenades_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.shield_time_ = from._impl_.shield_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.shield_health_ = from._impl_.shield_health_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.num_deaths_ = from._impl_.num_deaths_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.num_shield_ = from._impl_.num_shield_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void gameState_playerState::CopyFrom(const gameState_playerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameState.playerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gameState_playerState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void gameState_playerState::InternalSwap(gameState_playerState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(gameState_playerState, _impl_.num_shield_)
      + sizeof(gameState_playerState::_impl_.num_shield_)
      - PROTOBUF_FIELD_OFFSET(gameState_playerState, _impl_.hp_)>(
          reinterpret_cast<char*>(&_impl_.hp_),
          reinterpret_cast<char*>(&other->_impl_.hp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata gameState_playerState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gameState_2eproto_getter, &descriptor_table_gameState_2eproto_once,
      file_level_metadata_gameState_2eproto[0]);
}

// ===================================================================

class gameState::_Internal {
 public:
  using HasBits = decltype(std::declval<gameState>()._impl_._has_bits_);
  static const ::gameState_playerState& p1(const gameState* msg);
  static void set_has_p1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gameState_playerState& p2(const gameState* msg);
  static void set_has_p2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::gameState_playerState&
gameState::_Internal::p1(const gameState* msg) {
  return *msg->_impl_.p1_;
}
const ::gameState_playerState&
gameState::_Internal::p2(const gameState* msg) {
  return *msg->_impl_.p2_;
}
gameState::gameState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gameState)
}
gameState::gameState(const gameState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  gameState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.p1_){nullptr}
    , decltype(_impl_.p2_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_p1()) {
    _this->_impl_.p1_ = new ::gameState_playerState(*from._impl_.p1_);
  }
  if (from._internal_has_p2()) {
    _this->_impl_.p2_ = new ::gameState_playerState(*from._impl_.p2_);
  }
  // @@protoc_insertion_point(copy_constructor:gameState)
}

inline void gameState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.p1_){nullptr}
    , decltype(_impl_.p2_){nullptr}
  };
}

gameState::~gameState() {
  // @@protoc_insertion_point(destructor:gameState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void gameState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.p1_;
  if (this != internal_default_instance()) delete _impl_.p2_;
}

void gameState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void gameState::Clear() {
// @@protoc_insertion_point(message_clear_start:gameState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.p1_ != nullptr);
      _impl_.p1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.p2_ != nullptr);
      _impl_.p2_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* gameState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .gameState.playerState p1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_p1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .gameState.playerState p2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_p2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* gameState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .gameState.playerState p1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::p1(this),
        _Internal::p1(this).GetCachedSize(), target, stream);
  }

  // required .gameState.playerState p2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::p2(this),
        _Internal::p2(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gameState)
  return target;
}

size_t gameState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gameState)
  size_t total_size = 0;

  if (_internal_has_p1()) {
    // required .gameState.playerState p1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.p1_);
  }

  if (_internal_has_p2()) {
    // required .gameState.playerState p2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.p2_);
  }

  return total_size;
}
size_t gameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameState)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .gameState.playerState p1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.p1_);

    // required .gameState.playerState p2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.p2_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData gameState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    gameState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*gameState::GetClassData() const { return &_class_data_; }


void gameState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<gameState*>(&to_msg);
  auto& from = static_cast<const gameState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gameState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_p1()->::gameState_playerState::MergeFrom(
          from._internal_p1());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_p2()->::gameState_playerState::MergeFrom(
          from._internal_p2());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void gameState::CopyFrom(const gameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gameState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_p1()) {
    if (!_impl_.p1_->IsInitialized()) return false;
  }
  if (_internal_has_p2()) {
    if (!_impl_.p2_->IsInitialized()) return false;
  }
  return true;
}

void gameState::InternalSwap(gameState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(gameState, _impl_.p2_)
      + sizeof(gameState::_impl_.p2_)
      - PROTOBUF_FIELD_OFFSET(gameState, _impl_.p1_)>(
          reinterpret_cast<char*>(&_impl_.p1_),
          reinterpret_cast<char*>(&other->_impl_.p1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata gameState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gameState_2eproto_getter, &descriptor_table_gameState_2eproto_once,
      file_level_metadata_gameState_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gameState_playerState*
Arena::CreateMaybeMessage< ::gameState_playerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gameState_playerState >(arena);
}
template<> PROTOBUF_NOINLINE ::gameState*
Arena::CreateMaybeMessage< ::gameState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gameState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
