// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mlp_HLS,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.286000,HLS_SYN_LAT=172340,HLS_SYN_TPT=none,HLS_SYN_MEM=43,HLS_SYN_DSP=5,HLS_SYN_FF=1443,HLS_SYN_LUT=1776,HLS_VERSION=2020_1}" *)

module mlp_HLS (
        ap_clk,
        ap_rst_n,
        S_AXIS_TDATA,
        S_AXIS_TVALID,
        S_AXIS_TREADY,
        S_AXIS_TLAST,
        M_AXIS_TDATA,
        M_AXIS_TVALID,
        M_AXIS_TREADY,
        M_AXIS_TLAST
);

parameter    ap_ST_fsm_state1 = 40'd1;
parameter    ap_ST_fsm_state2 = 40'd2;
parameter    ap_ST_fsm_state3 = 40'd4;
parameter    ap_ST_fsm_state4 = 40'd8;
parameter    ap_ST_fsm_state5 = 40'd16;
parameter    ap_ST_fsm_state6 = 40'd32;
parameter    ap_ST_fsm_state7 = 40'd64;
parameter    ap_ST_fsm_state8 = 40'd128;
parameter    ap_ST_fsm_state9 = 40'd256;
parameter    ap_ST_fsm_state10 = 40'd512;
parameter    ap_ST_fsm_state11 = 40'd1024;
parameter    ap_ST_fsm_state12 = 40'd2048;
parameter    ap_ST_fsm_state13 = 40'd4096;
parameter    ap_ST_fsm_state14 = 40'd8192;
parameter    ap_ST_fsm_state15 = 40'd16384;
parameter    ap_ST_fsm_state16 = 40'd32768;
parameter    ap_ST_fsm_state17 = 40'd65536;
parameter    ap_ST_fsm_state18 = 40'd131072;
parameter    ap_ST_fsm_state19 = 40'd262144;
parameter    ap_ST_fsm_state20 = 40'd524288;
parameter    ap_ST_fsm_state21 = 40'd1048576;
parameter    ap_ST_fsm_state22 = 40'd2097152;
parameter    ap_ST_fsm_state23 = 40'd4194304;
parameter    ap_ST_fsm_state24 = 40'd8388608;
parameter    ap_ST_fsm_state25 = 40'd16777216;
parameter    ap_ST_fsm_state26 = 40'd33554432;
parameter    ap_ST_fsm_state27 = 40'd67108864;
parameter    ap_ST_fsm_state28 = 40'd134217728;
parameter    ap_ST_fsm_state29 = 40'd268435456;
parameter    ap_ST_fsm_state30 = 40'd536870912;
parameter    ap_ST_fsm_state31 = 40'd1073741824;
parameter    ap_ST_fsm_state32 = 40'd2147483648;
parameter    ap_ST_fsm_state33 = 40'd4294967296;
parameter    ap_ST_fsm_state34 = 40'd8589934592;
parameter    ap_ST_fsm_state35 = 40'd17179869184;
parameter    ap_ST_fsm_state36 = 40'd34359738368;
parameter    ap_ST_fsm_state37 = 40'd68719476736;
parameter    ap_ST_fsm_state38 = 40'd137438953472;
parameter    ap_ST_fsm_state39 = 40'd274877906944;
parameter    ap_ST_fsm_state40 = 40'd549755813888;

input   ap_clk;
input   ap_rst_n;
input  [31:0] S_AXIS_TDATA;
input   S_AXIS_TVALID;
output   S_AXIS_TREADY;
input   S_AXIS_TLAST;
output  [31:0] M_AXIS_TDATA;
output   M_AXIS_TVALID;
input   M_AXIS_TREADY;
output   M_AXIS_TLAST;

reg S_AXIS_TREADY;

 reg    ap_rst_n_inv;
wire   [6:0] layer1Bias_address0;
reg    layer1Bias_ce0;
wire   [31:0] layer1Bias_q0;
wire   [12:0] layer1Weight_address0;
reg    layer1Weight_ce0;
wire   [31:0] layer1Weight_q0;
wire   [6:0] layer2Bias_address0;
reg    layer2Bias_ce0;
wire   [31:0] layer2Bias_q0;
wire   [13:0] layer2Weight_address0;
reg    layer2Weight_ce0;
wire   [31:0] layer2Weight_q0;
wire   [8:0] outputWeight_address0;
reg    outputWeight_ce0;
wire   [31:0] outputWeight_q0;
reg    S_AXIS_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [39:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln60_fu_641_p2;
reg    M_AXIS_TDATA_blk_n;
wire    ap_CS_fsm_state39;
wire   [0:0] icmp_ln135_fu_1091_p2;
wire    ap_CS_fsm_state40;
wire   [31:0] grp_fu_484_p2;
reg   [31:0] reg_495;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state33;
wire   [31:0] grp_fu_477_p2;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state37;
wire   [1:0] add_ln57_fu_519_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] select_ln57_2_fu_559_p3;
reg   [31:0] select_ln57_2_reg_1170;
wire   [31:0] select_ln57_5_fu_583_p3;
reg   [31:0] select_ln57_5_reg_1175;
wire   [31:0] select_ln57_7_fu_599_p3;
reg   [31:0] select_ln57_7_reg_1180;
wire   [31:0] select_ln57_8_fu_607_p3;
reg   [31:0] select_ln57_8_reg_1185;
wire   [5:0] i_fu_647_p2;
reg    ap_block_state3;
wire   [12:0] add_ln79_fu_663_p2;
reg   [12:0] add_ln79_reg_1201;
wire    ap_CS_fsm_state4;
wire   [6:0] j_fu_675_p2;
reg   [6:0] j_reg_1209;
wire   [63:0] zext_ln80_fu_681_p1;
reg   [63:0] zext_ln80_reg_1214;
wire   [0:0] icmp_ln79_fu_669_p2;
wire    ap_CS_fsm_state5;
wire   [5:0] k_fu_692_p2;
reg   [5:0] k_reg_1232;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln81_fu_686_p2;
wire   [31:0] training_input_q0;
reg   [31:0] training_input_load_reg_1247;
wire    ap_CS_fsm_state7;
reg   [31:0] layer1Weight_load_reg_1252;
wire   [31:0] bitcast_ln84_fu_718_p1;
wire    ap_CS_fsm_state8;
wire   [6:0] j_2_fu_779_p2;
reg   [6:0] j_2_reg_1265;
wire    ap_CS_fsm_state16;
wire   [63:0] zext_ln96_fu_785_p1;
reg   [63:0] zext_ln96_reg_1270;
wire   [0:0] icmp_ln95_fu_773_p2;
wire   [14:0] sub_ln98_fu_814_p2;
reg   [14:0] sub_ln98_reg_1304;
wire    ap_CS_fsm_state17;
wire   [6:0] k_1_fu_826_p2;
reg   [6:0] k_1_reg_1317;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln97_fu_820_p2;
wire   [31:0] hidden1Layer_q0;
reg   [31:0] hidden1Layer_load_reg_1332;
wire    ap_CS_fsm_state19;
reg   [31:0] layer2Weight_load_reg_1337;
wire   [2:0] j_1_fu_908_p2;
reg   [2:0] j_1_reg_1345;
wire    ap_CS_fsm_state28;
wire   [9:0] sub_ln124_fu_934_p2;
reg   [9:0] sub_ln124_reg_1350;
wire   [0:0] icmp_ln121_fu_902_p2;
wire   [1:0] trunc_ln122_fu_940_p1;
reg   [1:0] trunc_ln122_reg_1355;
wire   [31:0] activation_3_fu_944_p6;
wire   [6:0] k_2_fu_980_p2;
reg   [6:0] k_2_reg_1395;
wire    ap_CS_fsm_state29;
wire   [0:0] icmp_ln123_fu_974_p2;
wire   [31:0] hidden2Layer_q0;
reg   [31:0] hidden2Layer_load_reg_1410;
wire    ap_CS_fsm_state30;
reg   [31:0] outputWeight_load_reg_1415;
wire   [2:0] i_2_fu_1031_p2;
wire    ap_CS_fsm_state38;
wire   [2:0] i_3_fu_1097_p2;
reg   [2:0] i_3_reg_1434;
wire    regslice_both_M_AXIS_V_data_U_apdone_blk;
reg    ap_block_state39_io;
wire   [31:0] write_output_data_fu_1119_p6;
reg   [5:0] training_input_address0;
reg    training_input_ce0;
reg    training_input_we0;
reg   [6:0] hidden1Layer_address0;
reg    hidden1Layer_ce0;
reg    hidden1Layer_we0;
wire   [31:0] hidden1Layer_d0;
reg   [6:0] hidden2Layer_address0;
reg    hidden2Layer_ce0;
reg    hidden2Layer_we0;
wire   [31:0] hidden2Layer_d0;
reg   [1:0] phi_ln57_reg_324;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln57_fu_615_p2;
reg   [5:0] i_0_reg_335;
reg   [6:0] j_0_reg_346;
wire    ap_CS_fsm_state15;
reg   [12:0] phi_mul_reg_357;
reg   [31:0] activation_0_reg_369;
reg   [5:0] k_0_reg_379;
reg   [6:0] j1_0_reg_390;
wire    ap_CS_fsm_state27;
reg   [31:0] activation2_0_reg_402;
reg   [6:0] k3_0_reg_412;
reg   [2:0] j4_0_reg_423;
reg   [31:0] outputLayer_0_reg_434;
reg   [6:0] k6_0_reg_444;
reg   [2:0] i7_0_reg_455;
wire   [0:0] icmp_ln129_fu_1025_p2;
reg   [2:0] i8_0_reg_466;
wire   [63:0] zext_ln62_fu_658_p1;
wire   [63:0] zext_ln84_1_fu_713_p1;
wire   [63:0] zext_ln83_fu_698_p1;
wire  signed [63:0] sext_ln98_fu_846_p1;
wire   [63:0] zext_ln98_fu_832_p1;
wire  signed [63:0] sext_ln124_fu_1000_p1;
wire   [63:0] zext_ln124_fu_986_p1;
reg   [31:0] output_0_0_fu_124;
reg   [31:0] output_1_0_fu_128;
reg   [31:0] output_2_0_fu_132;
reg   [31:0] output_3_0_fu_136;
reg   [31:0] outputLayer_3_fu_152;
reg   [31:0] outputLayer_3_1_fu_156;
reg   [31:0] outputLayer_3_2_fu_160;
reg   [31:0] outputLayer_3_3_fu_164;
reg   [31:0] output_3_fu_168;
wire   [31:0] output_0_fu_1067_p1;
wire   [1:0] trunc_ln131_fu_1049_p1;
reg   [31:0] output_3_1_fu_172;
reg   [31:0] output_3_3_fu_176;
reg   [31:0] output_3_2_fu_180;
reg   [31:0] grp_fu_477_p0;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state34;
reg   [31:0] grp_fu_484_p0;
reg   [31:0] grp_fu_484_p1;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state31;
reg   [31:0] grp_fu_488_p0;
wire   [0:0] icmp_ln57_1_fu_525_p2;
wire   [0:0] icmp_ln57_2_fu_539_p2;
wire   [31:0] select_ln57_fu_531_p3;
wire   [0:0] icmp_ln57_3_fu_553_p2;
wire   [31:0] select_ln57_1_fu_545_p3;
wire   [31:0] select_ln57_3_fu_567_p3;
wire   [31:0] select_ln57_4_fu_575_p3;
wire   [31:0] select_ln57_6_fu_591_p3;
wire   [12:0] zext_ln84_fu_703_p1;
wire   [12:0] add_ln84_fu_707_p2;
wire   [31:0] bitcast_ln87_fu_722_p1;
wire   [7:0] tmp_fu_726_p4;
wire   [22:0] trunc_ln87_fu_736_p1;
wire   [0:0] icmp_ln87_1_fu_746_p2;
wire   [0:0] icmp_ln87_fu_740_p2;
wire   [0:0] or_ln87_fu_752_p2;
wire   [0:0] grp_fu_488_p2;
wire   [0:0] and_ln87_fu_758_p2;
wire   [13:0] tmp_3_fu_790_p3;
wire   [10:0] tmp_9_fu_802_p3;
wire   [14:0] zext_ln98_1_fu_798_p1;
wire   [14:0] zext_ln98_2_fu_810_p1;
wire   [14:0] zext_ln98_3_fu_837_p1;
wire   [14:0] add_ln98_fu_841_p2;
wire   [31:0] bitcast_ln100_fu_851_p1;
wire   [7:0] tmp_4_fu_855_p4;
wire   [22:0] trunc_ln100_fu_865_p1;
wire   [0:0] icmp_ln100_1_fu_875_p2;
wire   [0:0] icmp_ln100_fu_869_p2;
wire   [0:0] or_ln100_fu_881_p2;
wire   [0:0] and_ln100_fu_887_p2;
wire   [6:0] tmp_10_fu_922_p3;
wire   [9:0] tmp_s_fu_914_p3;
wire   [9:0] zext_ln124_1_fu_930_p1;
wire   [1:0] activation_3_fu_944_p5;
wire   [9:0] zext_ln124_2_fu_991_p1;
wire   [9:0] add_ln124_fu_995_p2;
wire   [1:0] tmp_8_fu_1053_p5;
wire   [31:0] tmp_8_fu_1053_p6;
wire   [1:0] write_output_data_fu_1119_p5;
reg   [39:0] ap_NS_fsm;
wire    regslice_both_S_AXIS_V_data_U_apdone_blk;
wire   [31:0] S_AXIS_TDATA_int;
wire    S_AXIS_TVALID_int;
reg    S_AXIS_TREADY_int;
wire    regslice_both_S_AXIS_V_data_U_ack_in;
wire    regslice_both_w1_S_AXIS_V_last_U_apdone_blk;
wire    S_AXIS_TLAST_int;
wire    regslice_both_w1_S_AXIS_V_last_U_vld_out;
wire    regslice_both_w1_S_AXIS_V_last_U_ack_in;
reg    M_AXIS_TVALID_int;
wire    M_AXIS_TREADY_int;
wire    regslice_both_M_AXIS_V_data_U_vld_out;
wire    regslice_both_w1_M_AXIS_V_last_U_apdone_blk;
wire    M_AXIS_TLAST_int;
wire    regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy;
wire    regslice_both_w1_M_AXIS_V_last_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 40'd1;
end

mlp_HLS_layer1Bias #(
    .DataWidth( 32 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
layer1Bias_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layer1Bias_address0),
    .ce0(layer1Bias_ce0),
    .q0(layer1Bias_q0)
);

mlp_HLS_layer1Weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 6048 ),
    .AddressWidth( 13 ))
layer1Weight_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layer1Weight_address0),
    .ce0(layer1Weight_ce0),
    .q0(layer1Weight_q0)
);

mlp_HLS_layer2Bias #(
    .DataWidth( 32 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
layer2Bias_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layer2Bias_address0),
    .ce0(layer2Bias_ce0),
    .q0(layer2Bias_q0)
);

mlp_HLS_layer2Weicud #(
    .DataWidth( 32 ),
    .AddressRange( 12544 ),
    .AddressWidth( 14 ))
layer2Weight_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layer2Weight_address0),
    .ce0(layer2Weight_ce0),
    .q0(layer2Weight_q0)
);

mlp_HLS_outputWeidEe #(
    .DataWidth( 32 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
outputWeight_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(outputWeight_address0),
    .ce0(outputWeight_ce0),
    .q0(outputWeight_q0)
);

mlp_HLS_training_eOg #(
    .DataWidth( 32 ),
    .AddressRange( 54 ),
    .AddressWidth( 6 ))
training_input_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(training_input_address0),
    .ce0(training_input_ce0),
    .we0(training_input_we0),
    .d0(S_AXIS_TDATA_int),
    .q0(training_input_q0)
);

mlp_HLS_hidden1LafYi #(
    .DataWidth( 32 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
hidden1Layer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hidden1Layer_address0),
    .ce0(hidden1Layer_ce0),
    .we0(hidden1Layer_we0),
    .d0(hidden1Layer_d0),
    .q0(hidden1Layer_q0)
);

mlp_HLS_hidden1LafYi #(
    .DataWidth( 32 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
hidden2Layer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hidden2Layer_address0),
    .ce0(hidden2Layer_ce0),
    .we0(hidden2Layer_we0),
    .d0(hidden2Layer_d0),
    .q0(hidden2Layer_q0)
);

mlp_HLS_fadd_32nshbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mlp_HLS_fadd_32nshbi_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_477_p0),
    .din1(reg_495),
    .ce(1'b1),
    .dout(grp_fu_477_p2)
);

mlp_HLS_fmul_32nsibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mlp_HLS_fmul_32nsibs_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_484_p0),
    .din1(grp_fu_484_p1),
    .ce(1'b1),
    .dout(grp_fu_484_p2)
);

mlp_HLS_fcmp_32nsjbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
mlp_HLS_fcmp_32nsjbC_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_488_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_488_p2)
);

mlp_HLS_mux_42_32kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mlp_HLS_mux_42_32kbM_U4(
    .din0(32'd1020358796),
    .din1(32'd976195651),
    .din2(32'd3156319342),
    .din3(32'd3164722076),
    .din4(activation_3_fu_944_p5),
    .dout(activation_3_fu_944_p6)
);

mlp_HLS_mux_42_32kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mlp_HLS_mux_42_32kbM_U5(
    .din0(outputLayer_3_fu_152),
    .din1(outputLayer_3_1_fu_156),
    .din2(outputLayer_3_2_fu_160),
    .din3(outputLayer_3_3_fu_164),
    .din4(tmp_8_fu_1053_p5),
    .dout(tmp_8_fu_1053_p6)
);

mlp_HLS_mux_42_32kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mlp_HLS_mux_42_32kbM_U6(
    .din0(output_3_fu_168),
    .din1(output_3_1_fu_172),
    .din2(output_3_3_fu_176),
    .din3(output_3_2_fu_180),
    .din4(write_output_data_fu_1119_p5),
    .dout(write_output_data_fu_1119_p6)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_S_AXIS_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TDATA),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_S_AXIS_V_data_U_ack_in),
    .data_out(S_AXIS_TDATA_int),
    .vld_out(S_AXIS_TVALID_int),
    .ack_out(S_AXIS_TREADY_int),
    .apdone_blk(regslice_both_S_AXIS_V_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_S_AXIS_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TLAST),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_w1_S_AXIS_V_last_U_ack_in),
    .data_out(S_AXIS_TLAST_int),
    .vld_out(regslice_both_w1_S_AXIS_V_last_U_vld_out),
    .ack_out(S_AXIS_TREADY_int),
    .apdone_blk(regslice_both_w1_S_AXIS_V_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_M_AXIS_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(write_output_data_fu_1119_p6),
    .vld_in(M_AXIS_TVALID_int),
    .ack_in(M_AXIS_TREADY_int),
    .data_out(M_AXIS_TDATA),
    .vld_out(regslice_both_M_AXIS_V_data_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_M_AXIS_V_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_M_AXIS_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(M_AXIS_TLAST_int),
    .vld_in(M_AXIS_TVALID_int),
    .ack_in(regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy),
    .data_out(M_AXIS_TLAST),
    .vld_out(regslice_both_w1_M_AXIS_V_last_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_w1_M_AXIS_V_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        activation2_0_reg_402 <= grp_fu_477_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        activation2_0_reg_402 <= layer2Bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        activation_0_reg_369 <= grp_fu_477_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        activation_0_reg_369 <= layer1Bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) & (icmp_ln129_fu_1025_p2 == 1'd0))) begin
        i7_0_reg_455 <= i_2_fu_1031_p2;
    end else if (((icmp_ln121_fu_902_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        i7_0_reg_455 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln129_fu_1025_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state38))) begin
        i8_0_reg_466 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state40) & (1'b1 == M_AXIS_TREADY_int))) begin
        i8_0_reg_466 <= i_3_reg_1434;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln57_fu_615_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_335 <= 6'd0;
    end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln60_fu_641_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_641_p2 == 1'd0))) begin
        i_0_reg_335 <= i_fu_647_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln79_fu_669_p2 == 1'd1))) begin
        j1_0_reg_390 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        j1_0_reg_390 <= j_2_reg_1265;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_974_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        j4_0_reg_423 <= j_1_reg_1345;
    end else if (((icmp_ln95_fu_773_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        j4_0_reg_423 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln60_fu_641_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_641_p2 == 1'd1))) begin
        j_0_reg_346 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        j_0_reg_346 <= j_reg_1209;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        k3_0_reg_412 <= k_1_reg_1317;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        k3_0_reg_412 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        k6_0_reg_444 <= k_2_reg_1395;
    end else if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln121_fu_902_p2 == 1'd0))) begin
        k6_0_reg_444 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        k_0_reg_379 <= k_reg_1232;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_reg_379 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        outputLayer_0_reg_434 <= grp_fu_477_p2;
    end else if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln121_fu_902_p2 == 1'd0))) begin
        outputLayer_0_reg_434 <= activation_3_fu_944_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln131_fu_1049_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state38) & (icmp_ln129_fu_1025_p2 == 1'd0))) begin
        output_3_1_fu_172 <= output_0_fu_1067_p1;
    end else if (((icmp_ln121_fu_902_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        output_3_1_fu_172 <= select_ln57_7_reg_1180;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln131_fu_1049_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state38) & (icmp_ln129_fu_1025_p2 == 1'd0))) begin
        output_3_2_fu_180 <= output_0_fu_1067_p1;
    end else if (((icmp_ln121_fu_902_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        output_3_2_fu_180 <= select_ln57_2_reg_1170;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln131_fu_1049_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state38) & (icmp_ln129_fu_1025_p2 == 1'd0))) begin
        output_3_3_fu_176 <= output_0_fu_1067_p1;
    end else if (((icmp_ln121_fu_902_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        output_3_3_fu_176 <= select_ln57_5_reg_1175;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln131_fu_1049_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state38) & (icmp_ln129_fu_1025_p2 == 1'd0))) begin
        output_3_fu_168 <= output_0_fu_1067_p1;
    end else if (((icmp_ln121_fu_902_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        output_3_fu_168 <= select_ln57_8_reg_1185;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln57_fu_615_p2 == 1'd0))) begin
        phi_ln57_reg_324 <= add_ln57_fu_519_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        phi_ln57_reg_324 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln60_fu_641_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_641_p2 == 1'd1))) begin
        phi_mul_reg_357 <= 13'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        phi_mul_reg_357 <= add_ln79_reg_1201;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln79_reg_1201 <= add_ln79_fu_663_p2;
        j_reg_1209 <= j_fu_675_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        hidden1Layer_load_reg_1332 <= hidden1Layer_q0;
        layer2Weight_load_reg_1337 <= layer2Weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        hidden2Layer_load_reg_1410 <= hidden2Layer_q0;
        outputWeight_load_reg_1415 <= outputWeight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state39_io) | (regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state39))) begin
        i_3_reg_1434 <= i_3_fu_1097_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        j_1_reg_1345 <= j_1_fu_908_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        j_2_reg_1265 <= j_2_fu_779_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        k_1_reg_1317 <= k_1_fu_826_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        k_2_reg_1395 <= k_2_fu_980_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_reg_1232 <= k_fu_692_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        layer1Weight_load_reg_1252 <= layer1Weight_q0;
        training_input_load_reg_1247 <= training_input_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_974_p2 == 1'd1) & (trunc_ln122_reg_1355 == 2'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        outputLayer_3_1_fu_156 <= outputLayer_0_reg_434;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_974_p2 == 1'd1) & (trunc_ln122_reg_1355 == 2'd2) & (1'b1 == ap_CS_fsm_state29))) begin
        outputLayer_3_2_fu_160 <= outputLayer_0_reg_434;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_974_p2 == 1'd1) & (trunc_ln122_reg_1355 == 2'd3) & (1'b1 == ap_CS_fsm_state29))) begin
        outputLayer_3_3_fu_164 <= outputLayer_0_reg_434;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_974_p2 == 1'd1) & (trunc_ln122_reg_1355 == 2'd0) & (1'b1 == ap_CS_fsm_state29))) begin
        outputLayer_3_fu_152 <= outputLayer_0_reg_434;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        output_0_0_fu_124 <= select_ln57_8_fu_607_p3;
        output_1_0_fu_128 <= select_ln57_7_fu_599_p3;
        output_2_0_fu_132 <= select_ln57_5_fu_583_p3;
        output_3_0_fu_136 <= select_ln57_2_fu_559_p3;
        select_ln57_2_reg_1170 <= select_ln57_2_fu_559_p3;
        select_ln57_5_reg_1175 <= select_ln57_5_fu_583_p3;
        select_ln57_7_reg_1180 <= select_ln57_7_fu_599_p3;
        select_ln57_8_reg_1185 <= select_ln57_8_fu_607_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_495 <= grp_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln121_fu_902_p2 == 1'd0))) begin
        sub_ln124_reg_1350[9 : 4] <= sub_ln124_fu_934_p2[9 : 4];
        trunc_ln122_reg_1355 <= trunc_ln122_fu_940_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        sub_ln98_reg_1304[14 : 4] <= sub_ln98_fu_814_p2[14 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln79_fu_669_p2 == 1'd0))) begin
        zext_ln80_reg_1214[6 : 0] <= zext_ln80_fu_681_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln95_fu_773_p2 == 1'd0))) begin
        zext_ln96_reg_1270[6 : 0] <= zext_ln96_fu_785_p1[6 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | ((1'b1 == ap_CS_fsm_state39) & (icmp_ln135_fu_1091_p2 == 1'd0)))) begin
        M_AXIS_TDATA_blk_n = M_AXIS_TREADY_int;
    end else begin
        M_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state39_io) | (regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state39) & (icmp_ln135_fu_1091_p2 == 1'd0))) begin
        M_AXIS_TVALID_int = 1'b1;
    end else begin
        M_AXIS_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_641_p2 == 1'd0))) begin
        S_AXIS_TDATA_blk_n = S_AXIS_TVALID_int;
    end else begin
        S_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_S_AXIS_V_data_U_ack_in == 1'b1) & (1'b1 == S_AXIS_TVALID))) begin
        S_AXIS_TREADY = 1'b1;
    end else begin
        S_AXIS_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln60_fu_641_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_641_p2 == 1'd0))) begin
        S_AXIS_TREADY_int = 1'b1;
    end else begin
        S_AXIS_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_477_p0 = outputLayer_0_reg_434;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_477_p0 = activation2_0_reg_402;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_477_p0 = activation_0_reg_369;
    end else begin
        grp_fu_477_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_484_p0 = hidden2Layer_load_reg_1410;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_484_p0 = hidden1Layer_load_reg_1332;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_484_p0 = bitcast_ln84_fu_718_p1;
    end else begin
        grp_fu_484_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_484_p1 = outputWeight_load_reg_1415;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_484_p1 = layer2Weight_load_reg_1337;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_484_p1 = layer1Weight_load_reg_1252;
    end else begin
        grp_fu_484_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_488_p0 = activation2_0_reg_402;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_488_p0 = activation_0_reg_369;
    end else begin
        grp_fu_488_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        hidden1Layer_address0 = zext_ln98_fu_832_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        hidden1Layer_address0 = zext_ln80_reg_1214;
    end else begin
        hidden1Layer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18))) begin
        hidden1Layer_ce0 = 1'b1;
    end else begin
        hidden1Layer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        hidden1Layer_we0 = 1'b1;
    end else begin
        hidden1Layer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        hidden2Layer_address0 = zext_ln124_fu_986_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        hidden2Layer_address0 = zext_ln96_reg_1270;
    end else begin
        hidden2Layer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state29))) begin
        hidden2Layer_ce0 = 1'b1;
    end else begin
        hidden2Layer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        hidden2Layer_we0 = 1'b1;
    end else begin
        hidden2Layer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        layer1Bias_ce0 = 1'b1;
    end else begin
        layer1Bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        layer1Weight_ce0 = 1'b1;
    end else begin
        layer1Weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        layer2Bias_ce0 = 1'b1;
    end else begin
        layer2Bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        layer2Weight_ce0 = 1'b1;
    end else begin
        layer2Weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        outputWeight_ce0 = 1'b1;
    end else begin
        outputWeight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        training_input_address0 = zext_ln83_fu_698_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        training_input_address0 = zext_ln62_fu_658_p1;
    end else begin
        training_input_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln60_fu_641_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        training_input_ce0 = 1'b1;
    end else begin
        training_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln60_fu_641_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_641_p2 == 1'd0))) begin
        training_input_we0 = 1'b1;
    end else begin
        training_input_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln57_fu_615_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln60_fu_641_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_641_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln60_fu_641_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_641_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln79_fu_669_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln81_fu_686_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln95_fu_773_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln97_fu_820_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state28 : begin
            if (((icmp_ln121_fu_902_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((icmp_ln123_fu_974_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state38 : begin
            if (((icmp_ln129_fu_1025_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if ((~((1'b1 == ap_block_state39_io) | (regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state39) & (icmp_ln135_fu_1091_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b1 == ap_block_state39_io) | (regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state39) & (icmp_ln135_fu_1091_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (1'b1 == M_AXIS_TREADY_int))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_AXIS_TLAST_int = ((i8_0_reg_466 == 3'd3) ? 1'b1 : 1'b0);

assign M_AXIS_TVALID = regslice_both_M_AXIS_V_data_U_vld_out;

assign activation_3_fu_944_p5 = j4_0_reg_423[1:0];

assign add_ln124_fu_995_p2 = (sub_ln124_reg_1350 + zext_ln124_2_fu_991_p1);

assign add_ln57_fu_519_p2 = (phi_ln57_reg_324 + 2'd1);

assign add_ln79_fu_663_p2 = (phi_mul_reg_357 + 13'd54);

assign add_ln84_fu_707_p2 = (phi_mul_reg_357 + zext_ln84_fu_703_p1);

assign add_ln98_fu_841_p2 = (sub_ln98_reg_1304 + zext_ln98_3_fu_837_p1);

assign and_ln100_fu_887_p2 = (or_ln100_fu_881_p2 & grp_fu_488_p2);

assign and_ln87_fu_758_p2 = (or_ln87_fu_752_p2 & grp_fu_488_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state3 = ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln60_fu_641_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state39_io = ((1'b0 == M_AXIS_TREADY_int) & (icmp_ln135_fu_1091_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln100_fu_851_p1 = activation2_0_reg_402;

assign bitcast_ln84_fu_718_p1 = training_input_load_reg_1247;

assign bitcast_ln87_fu_722_p1 = activation_0_reg_369;

assign hidden1Layer_d0 = ((and_ln87_fu_758_p2[0:0] === 1'b1) ? 32'd0 : activation_0_reg_369);

assign hidden2Layer_d0 = ((and_ln100_fu_887_p2[0:0] === 1'b1) ? 32'd0 : activation2_0_reg_402);

assign i_2_fu_1031_p2 = (i7_0_reg_455 + 3'd1);

assign i_3_fu_1097_p2 = (i8_0_reg_466 + 3'd1);

assign i_fu_647_p2 = (i_0_reg_335 + 6'd1);

assign icmp_ln100_1_fu_875_p2 = ((trunc_ln100_fu_865_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln100_fu_869_p2 = ((tmp_4_fu_855_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_902_p2 = ((j4_0_reg_423 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln123_fu_974_p2 = ((k6_0_reg_444 == 7'd112) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_1025_p2 = ((i7_0_reg_455 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln135_fu_1091_p2 = ((i8_0_reg_466 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln57_1_fu_525_p2 = ((phi_ln57_reg_324 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln57_2_fu_539_p2 = ((phi_ln57_reg_324 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln57_3_fu_553_p2 = ((phi_ln57_reg_324 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_615_p2 = ((phi_ln57_reg_324 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_641_p2 = ((i_0_reg_335 == 6'd54) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_669_p2 = ((j_0_reg_346 == 7'd112) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_686_p2 = ((k_0_reg_379 == 6'd54) ? 1'b1 : 1'b0);

assign icmp_ln87_1_fu_746_p2 = ((trunc_ln87_fu_736_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_740_p2 = ((tmp_fu_726_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_773_p2 = ((j1_0_reg_390 == 7'd112) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_820_p2 = ((k3_0_reg_412 == 7'd112) ? 1'b1 : 1'b0);

assign j_1_fu_908_p2 = (j4_0_reg_423 + 3'd1);

assign j_2_fu_779_p2 = (j1_0_reg_390 + 7'd1);

assign j_fu_675_p2 = (j_0_reg_346 + 7'd1);

assign k_1_fu_826_p2 = (k3_0_reg_412 + 7'd1);

assign k_2_fu_980_p2 = (k6_0_reg_444 + 7'd1);

assign k_fu_692_p2 = (k_0_reg_379 + 6'd1);

assign layer1Bias_address0 = zext_ln80_fu_681_p1;

assign layer1Weight_address0 = zext_ln84_1_fu_713_p1;

assign layer2Bias_address0 = zext_ln96_fu_785_p1;

assign layer2Weight_address0 = sext_ln98_fu_846_p1;

assign or_ln100_fu_881_p2 = (icmp_ln100_fu_869_p2 | icmp_ln100_1_fu_875_p2);

assign or_ln87_fu_752_p2 = (icmp_ln87_fu_740_p2 | icmp_ln87_1_fu_746_p2);

assign outputWeight_address0 = sext_ln124_fu_1000_p1;

assign output_0_fu_1067_p1 = tmp_8_fu_1053_p6;

assign select_ln57_1_fu_545_p3 = ((icmp_ln57_2_fu_539_p2[0:0] === 1'b1) ? output_3_0_fu_136 : select_ln57_fu_531_p3);

assign select_ln57_2_fu_559_p3 = ((icmp_ln57_3_fu_553_p2[0:0] === 1'b1) ? output_3_0_fu_136 : select_ln57_1_fu_545_p3);

assign select_ln57_3_fu_567_p3 = ((icmp_ln57_1_fu_525_p2[0:0] === 1'b1) ? 32'd0 : output_2_0_fu_132);

assign select_ln57_4_fu_575_p3 = ((icmp_ln57_2_fu_539_p2[0:0] === 1'b1) ? output_2_0_fu_132 : select_ln57_3_fu_567_p3);

assign select_ln57_5_fu_583_p3 = ((icmp_ln57_3_fu_553_p2[0:0] === 1'b1) ? output_2_0_fu_132 : select_ln57_4_fu_575_p3);

assign select_ln57_6_fu_591_p3 = ((icmp_ln57_2_fu_539_p2[0:0] === 1'b1) ? 32'd0 : output_1_0_fu_128);

assign select_ln57_7_fu_599_p3 = ((icmp_ln57_3_fu_553_p2[0:0] === 1'b1) ? output_1_0_fu_128 : select_ln57_6_fu_591_p3);

assign select_ln57_8_fu_607_p3 = ((icmp_ln57_3_fu_553_p2[0:0] === 1'b1) ? 32'd0 : output_0_0_fu_124);

assign select_ln57_fu_531_p3 = ((icmp_ln57_1_fu_525_p2[0:0] === 1'b1) ? output_3_0_fu_136 : 32'd0);

assign sext_ln124_fu_1000_p1 = $signed(add_ln124_fu_995_p2);

assign sext_ln98_fu_846_p1 = $signed(add_ln98_fu_841_p2);

assign sub_ln124_fu_934_p2 = (tmp_s_fu_914_p3 - zext_ln124_1_fu_930_p1);

assign sub_ln98_fu_814_p2 = (zext_ln98_1_fu_798_p1 - zext_ln98_2_fu_810_p1);

assign tmp_10_fu_922_p3 = {{j4_0_reg_423}, {4'd0}};

assign tmp_3_fu_790_p3 = {{j1_0_reg_390}, {7'd0}};

assign tmp_4_fu_855_p4 = {{bitcast_ln100_fu_851_p1[30:23]}};

assign tmp_8_fu_1053_p5 = i7_0_reg_455[1:0];

assign tmp_9_fu_802_p3 = {{j1_0_reg_390}, {4'd0}};

assign tmp_fu_726_p4 = {{bitcast_ln87_fu_722_p1[30:23]}};

assign tmp_s_fu_914_p3 = {{j4_0_reg_423}, {7'd0}};

assign trunc_ln100_fu_865_p1 = bitcast_ln100_fu_851_p1[22:0];

assign trunc_ln122_fu_940_p1 = j4_0_reg_423[1:0];

assign trunc_ln131_fu_1049_p1 = i7_0_reg_455[1:0];

assign trunc_ln87_fu_736_p1 = bitcast_ln87_fu_722_p1[22:0];

assign write_output_data_fu_1119_p5 = i8_0_reg_466[1:0];

assign zext_ln124_1_fu_930_p1 = tmp_10_fu_922_p3;

assign zext_ln124_2_fu_991_p1 = k6_0_reg_444;

assign zext_ln124_fu_986_p1 = k6_0_reg_444;

assign zext_ln62_fu_658_p1 = i_0_reg_335;

assign zext_ln80_fu_681_p1 = j_0_reg_346;

assign zext_ln83_fu_698_p1 = k_0_reg_379;

assign zext_ln84_1_fu_713_p1 = add_ln84_fu_707_p2;

assign zext_ln84_fu_703_p1 = k_0_reg_379;

assign zext_ln96_fu_785_p1 = j1_0_reg_390;

assign zext_ln98_1_fu_798_p1 = tmp_3_fu_790_p3;

assign zext_ln98_2_fu_810_p1 = tmp_9_fu_802_p3;

assign zext_ln98_3_fu_837_p1 = k3_0_reg_412;

assign zext_ln98_fu_832_p1 = k3_0_reg_412;

always @ (posedge ap_clk) begin
    zext_ln80_reg_1214[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln96_reg_1270[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    sub_ln98_reg_1304[3:0] <= 4'b0000;
    sub_ln124_reg_1350[3:0] <= 4'b0000;
end

endmodule //mlp_HLS
