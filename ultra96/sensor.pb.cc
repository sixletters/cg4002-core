// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

#include "sensor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Sensor_IMUdata::Sensor_IMUdata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.a1_)*/0
  , /*decltype(_impl_.a2_)*/0
  , /*decltype(_impl_.a3_)*/0
  , /*decltype(_impl_.g1_)*/0
  , /*decltype(_impl_.g2_)*/0
  , /*decltype(_impl_.g3_)*/0} {}
struct Sensor_IMUdataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Sensor_IMUdataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Sensor_IMUdataDefaultTypeInternal() {}
  union {
    Sensor_IMUdata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Sensor_IMUdataDefaultTypeInternal _Sensor_IMUdata_default_instance_;
PROTOBUF_CONSTEXPR Sensor::Sensor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_.playerid_)*/0
  , /*decltype(_impl_.beetleid_)*/0} {}
struct SensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorDefaultTypeInternal() {}
  union {
    Sensor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorDefaultTypeInternal _Sensor_default_instance_;
static ::_pb::Metadata file_level_metadata_sensor_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_sensor_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sensor_2eproto = nullptr;

const uint32_t TableStruct_sensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Sensor_IMUdata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Sensor_IMUdata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Sensor_IMUdata, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::Sensor_IMUdata, _impl_.a2_),
  PROTOBUF_FIELD_OFFSET(::Sensor_IMUdata, _impl_.a3_),
  PROTOBUF_FIELD_OFFSET(::Sensor_IMUdata, _impl_.g1_),
  PROTOBUF_FIELD_OFFSET(::Sensor_IMUdata, _impl_.g2_),
  PROTOBUF_FIELD_OFFSET(::Sensor_IMUdata, _impl_.g3_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::Sensor, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Sensor, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Sensor, _impl_.beetleid_),
  PROTOBUF_FIELD_OFFSET(::Sensor, _impl_.payload_),
  0,
  1,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::Sensor_IMUdata)},
  { 18, 27, -1, sizeof(::Sensor)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Sensor_IMUdata_default_instance_._instance,
  &::_Sensor_default_instance_._instance,
};

const char descriptor_table_protodef_sensor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014sensor.proto\"\241\001\n\006Sensor\022\020\n\010playerID\030\001 "
  "\002(\005\022\020\n\010beetleID\030\002 \002(\005\022 \n\007payload\030\003 \003(\0132\017"
  ".Sensor.IMUdata\032Q\n\007IMUdata\022\n\n\002a1\030\001 \002(\002\022\n"
  "\n\002a2\030\002 \002(\002\022\n\n\002a3\030\003 \002(\002\022\n\n\002g1\030\004 \002(\002\022\n\n\002g2"
  "\030\005 \002(\002\022\n\n\002g3\030\006 \002(\002"
  ;
static ::_pbi::once_flag descriptor_table_sensor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sensor_2eproto = {
    false, false, 178, descriptor_table_protodef_sensor_2eproto,
    "sensor.proto",
    &descriptor_table_sensor_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_sensor_2eproto::offsets,
    file_level_metadata_sensor_2eproto, file_level_enum_descriptors_sensor_2eproto,
    file_level_service_descriptors_sensor_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sensor_2eproto_getter() {
  return &descriptor_table_sensor_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sensor_2eproto(&descriptor_table_sensor_2eproto);

// ===================================================================

class Sensor_IMUdata::_Internal {
 public:
  using HasBits = decltype(std::declval<Sensor_IMUdata>()._impl_._has_bits_);
  static void set_has_a1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_a2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_a3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_g1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_g2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_g3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

Sensor_IMUdata::Sensor_IMUdata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Sensor.IMUdata)
}
Sensor_IMUdata::Sensor_IMUdata(const Sensor_IMUdata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sensor_IMUdata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.a3_){}
    , decltype(_impl_.g1_){}
    , decltype(_impl_.g2_){}
    , decltype(_impl_.g3_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.g3_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.g3_));
  // @@protoc_insertion_point(copy_constructor:Sensor.IMUdata)
}

inline void Sensor_IMUdata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.a1_){0}
    , decltype(_impl_.a2_){0}
    , decltype(_impl_.a3_){0}
    , decltype(_impl_.g1_){0}
    , decltype(_impl_.g2_){0}
    , decltype(_impl_.g3_){0}
  };
}

Sensor_IMUdata::~Sensor_IMUdata() {
  // @@protoc_insertion_point(destructor:Sensor.IMUdata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sensor_IMUdata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Sensor_IMUdata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sensor_IMUdata::Clear() {
// @@protoc_insertion_point(message_clear_start:Sensor.IMUdata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.a1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.g3_) -
        reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.g3_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sensor_IMUdata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_a1(&has_bits);
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_a2(&has_bits);
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float a3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_a3(&has_bits);
          _impl_.a3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float g1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_g1(&has_bits);
          _impl_.g1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float g2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_g2(&has_bits);
          _impl_.g2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float g3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_g3(&has_bits);
          _impl_.g3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sensor_IMUdata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Sensor.IMUdata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float a1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_a1(), target);
  }

  // required float a2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_a2(), target);
  }

  // required float a3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_a3(), target);
  }

  // required float g1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_g1(), target);
  }

  // required float g2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_g2(), target);
  }

  // required float g3 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_g3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Sensor.IMUdata)
  return target;
}

size_t Sensor_IMUdata::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Sensor.IMUdata)
  size_t total_size = 0;

  if (_internal_has_a1()) {
    // required float a1 = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_a2()) {
    // required float a2 = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_a3()) {
    // required float a3 = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_g1()) {
    // required float g1 = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_g2()) {
    // required float g2 = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_g3()) {
    // required float g3 = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Sensor_IMUdata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Sensor.IMUdata)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required float a1 = 1;
    total_size += 1 + 4;

    // required float a2 = 2;
    total_size += 1 + 4;

    // required float a3 = 3;
    total_size += 1 + 4;

    // required float g1 = 4;
    total_size += 1 + 4;

    // required float g2 = 5;
    total_size += 1 + 4;

    // required float g3 = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sensor_IMUdata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sensor_IMUdata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sensor_IMUdata::GetClassData() const { return &_class_data_; }


void Sensor_IMUdata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sensor_IMUdata*>(&to_msg);
  auto& from = static_cast<const Sensor_IMUdata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Sensor.IMUdata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.a1_ = from._impl_.a1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.a2_ = from._impl_.a2_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.a3_ = from._impl_.a3_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.g1_ = from._impl_.g1_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.g2_ = from._impl_.g2_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.g3_ = from._impl_.g3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sensor_IMUdata::CopyFrom(const Sensor_IMUdata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Sensor.IMUdata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor_IMUdata::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Sensor_IMUdata::InternalSwap(Sensor_IMUdata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sensor_IMUdata, _impl_.g3_)
      + sizeof(Sensor_IMUdata::_impl_.g3_)
      - PROTOBUF_FIELD_OFFSET(Sensor_IMUdata, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sensor_IMUdata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_2eproto_getter, &descriptor_table_sensor_2eproto_once,
      file_level_metadata_sensor_2eproto[0]);
}

// ===================================================================

class Sensor::_Internal {
 public:
  using HasBits = decltype(std::declval<Sensor>()._impl_._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_beetleid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Sensor::Sensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Sensor)
}
Sensor::Sensor(const Sensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sensor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_){from._impl_.payload_}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.beetleid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.beetleid_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.beetleid_));
  // @@protoc_insertion_point(copy_constructor:Sensor)
}

inline void Sensor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_){arena}
    , decltype(_impl_.playerid_){0}
    , decltype(_impl_.beetleid_){0}
  };
}

Sensor::~Sensor() {
  // @@protoc_insertion_point(destructor:Sensor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.~RepeatedPtrField();
}

void Sensor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:Sensor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.beetleid_) -
        reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.beetleid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sensor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 beetleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_beetleid(&has_bits);
          _impl_.beetleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Sensor.IMUdata payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_payload(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sensor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Sensor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 playerID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // required int32 beetleID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_beetleid(), target);
  }

  // repeated .Sensor.IMUdata payload = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_payload_size()); i < n; i++) {
    const auto& repfield = this->_internal_payload(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Sensor)
  return target;
}

size_t Sensor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Sensor)
  size_t total_size = 0;

  if (_internal_has_playerid()) {
    // required int32 playerID = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerid());
  }

  if (_internal_has_beetleid()) {
    // required int32 beetleID = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_beetleid());
  }

  return total_size;
}
size_t Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Sensor)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 playerID = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerid());

    // required int32 beetleID = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_beetleid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Sensor.IMUdata payload = 3;
  total_size += 1UL * this->_internal_payload_size();
  for (const auto& msg : this->_impl_.payload_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sensor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sensor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sensor::GetClassData() const { return &_class_data_; }


void Sensor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sensor*>(&to_msg);
  auto& from = static_cast<const Sensor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Sensor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.payload_.MergeFrom(from._impl_.payload_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.playerid_ = from._impl_.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.beetleid_ = from._impl_.beetleid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sensor::CopyFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.payload_))
    return false;
  return true;
}

void Sensor::InternalSwap(Sensor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.payload_.InternalSwap(&other->_impl_.payload_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sensor, _impl_.beetleid_)
      + sizeof(Sensor::_impl_.beetleid_)
      - PROTOBUF_FIELD_OFFSET(Sensor, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sensor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sensor_2eproto_getter, &descriptor_table_sensor_2eproto_once,
      file_level_metadata_sensor_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Sensor_IMUdata*
Arena::CreateMaybeMessage< ::Sensor_IMUdata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Sensor_IMUdata >(arena);
}
template<> PROTOBUF_NOINLINE ::Sensor*
Arena::CreateMaybeMessage< ::Sensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Sensor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
