-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity mlp_HLS_layer2Bias_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 112
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of mlp_HLS_layer2Bias_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011101111000111001101100110", 
    1 => "10111100101101100000101101010011", 
    2 => "10111100110001111011001000100010", 
    3 => "10111101011000100110010100101001", 
    4 => "00111100111111101010011011100111", 
    5 => "00111100110001100001001110101011", 
    6 => "10111100011101110101110111111110", 
    7 => "00111011011100001100011101011101", 
    8 => "00111100001100100001111101100001", 
    9 => "10111100100010001110101111010010", 
    10 => "10111100110111110001110110010011", 
    11 => "00111100101110111010011001010100", 
    12 => "10111100101000001011111010011111", 
    13 => "10111010110100000110001100110001", 
    14 => "00111100010011000111010010010100", 
    15 => "10111100110100111100100111011101", 
    16 => "00111010001001110101101101010101", 
    17 => "10111100000100111100111011011011", 
    18 => "00111100101000000100010010110001", 
    19 => "10111011111011011011101110000010", 
    20 => "10111101000000110000001110110010", 
    21 => "00111011001001011101110010100101", 
    22 => "00111011100001001110101000000110", 
    23 => "10111100100111101011010110101101", 
    24 => "00111100001100100010011110111111", 
    25 => "10111011110010001110011000100011", 
    26 => "10111100000000101101100011011110", 
    27 => "00111100110111111100000011111100", 
    28 => "10111011111100111111110010000101", 
    29 => "10111100101111000000000001100001", 
    30 => "10111101000101001110101011011111", 
    31 => "00111001011000111110000111101100", 
    32 => "00111011100001000111011111110011", 
    33 => "00111100100111101011101110111110", 
    34 => "10111100101110100011001001000011", 
    35 => "10111011110111011010100110001001", 
    36 => "10111101010011010100100011000101", 
    37 => "00111011110001101010010000111111", 
    38 => "10111011101001110100100101101111", 
    39 => "10111100101101000111010110010100", 
    40 => "00111100010001001100000000101001", 
    41 => "00111100001010011110000011101101", 
    42 => "10111100110111111110100011111010", 
    43 => "10111100111001011001111011100101", 
    44 => "10111101000111011010000011010011", 
    45 => "00000000000000000000000000000000", 
    46 => "10111100101111010100000011110010", 
    47 => "00111100111111010100101110110011", 
    48 => "10111100111000000111111111011000", 
    49 => "00111100100101101110000110101001", 
    50 => "10111100010101001011101001010010", 
    51 => "00111100110111111001101001001100", 
    52 => "00111100110000010000110110100111", 
    53 => "10111011111010110010010011111100", 
    54 => "10111100111010110100101001001000", 
    55 => "10111100101100001001000000010001", 
    56 => "10111101000011101101000100000111", 
    57 => "00111100010000000000001010010011", 
    58 => "10111100100101011100001000001011", 
    59 => "10111100011010101101100010100101", 
    60 => "10111100011010110011111011110010", 
    61 => "10111100010110010111011011110001", 
    62 => "10111100101100111000011000111010", 
    63 => "10111100101011101100001100101011", 
    64 => "00000000000000000000000000000000", 
    65 => "10111101000011101011111011000101", 
    66 => "10111100010110111111001100010000", 
    67 => "00000000000000000000000000000000", 
    68 => "10111100010010101000000000101001", 
    69 => "10111011000111010110111111110101", 
    70 => "10111100001110100110111000000100", 
    71 => "00111100100111111100010110101011", 
    72 => "10111011101001101101000101111110", 
    73 => "00111011100010111001101010001100", 
    74 => "00111100001000010101010100101110", 
    75 => "00000000000000000000000000000000", 
    76 => "00111101000000001111101100010011", 
    77 => "10111100110011101100000011001110", 
    78 => "00111100000111001100110011111000", 
    79 => "10111011111100010111111101110110", 
    80 => "00111101000011111011100001000001", 
    81 => "10111100000010111100110100011011", 
    82 => "00111011111101011101100100100001", 
    83 => "10111100000011011001010001000101", 
    84 => "00111100000001000001001000101001", 
    85 => "10111100011000010110001110011011", 
    86 => "10111100110010001010100011111000", 
    87 => "00111100101010100101000111100000", 
    88 => "10111100101011000001001101111100", 
    89 => "00111001110110101001010000100110", 
    90 => "10111101010001110000010011010001", 
    91 => "00111100011111000010111011011010", 
    92 => "00111100010000111101110001010000", 
    93 => "10111101000010101100001111000101", 
    94 => "10111100110100101001111010010111", 
    95 => "10111100111000000010010111111111", 
    96 => "00111100011010000101011011001001", 
    97 => "10111100101010110000100110011001", 
    98 => "10111100001100100111001101101010", 
    99 => "00111010110101100011111101100011", 
    100 => "10111101000010111111101100111001", 
    101 => "00111100110010000101101000001001", 
    102 => "10111011001100100100110000011000", 
    103 => "10111100111100111010110110001001", 
    104 => "10111100101111101010000001110011", 
    105 => "00111011001001001000000110101001", 
    106 => "10111100111100110001111001000110", 
    107 => "10111000101010001000011000110010", 
    108 => "10111100000010000001010100001110", 
    109 => "10111100000100001011010100001110", 
    110 => "10111010111100010011111000100110", 
    111 => "10111100110001101000100101001110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity mlp_HLS_layer2Bias is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 112;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of mlp_HLS_layer2Bias is
    component mlp_HLS_layer2Bias_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    mlp_HLS_layer2Bias_rom_U :  component mlp_HLS_layer2Bias_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


