// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sensor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sensor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sensor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sensor_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensor_2eproto;
class Sensor;
struct SensorDefaultTypeInternal;
extern SensorDefaultTypeInternal _Sensor_default_instance_;
class Sensor_IMUdata;
struct Sensor_IMUdataDefaultTypeInternal;
extern Sensor_IMUdataDefaultTypeInternal _Sensor_IMUdata_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Sensor* Arena::CreateMaybeMessage<::Sensor>(Arena*);
template<> ::Sensor_IMUdata* Arena::CreateMaybeMessage<::Sensor_IMUdata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Sensor_IMUdata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Sensor.IMUdata) */ {
 public:
  inline Sensor_IMUdata() : Sensor_IMUdata(nullptr) {}
  ~Sensor_IMUdata() override;
  explicit PROTOBUF_CONSTEXPR Sensor_IMUdata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sensor_IMUdata(const Sensor_IMUdata& from);
  Sensor_IMUdata(Sensor_IMUdata&& from) noexcept
    : Sensor_IMUdata() {
    *this = ::std::move(from);
  }

  inline Sensor_IMUdata& operator=(const Sensor_IMUdata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sensor_IMUdata& operator=(Sensor_IMUdata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sensor_IMUdata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sensor_IMUdata* internal_default_instance() {
    return reinterpret_cast<const Sensor_IMUdata*>(
               &_Sensor_IMUdata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Sensor_IMUdata& a, Sensor_IMUdata& b) {
    a.Swap(&b);
  }
  inline void Swap(Sensor_IMUdata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sensor_IMUdata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sensor_IMUdata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sensor_IMUdata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sensor_IMUdata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Sensor_IMUdata& from) {
    Sensor_IMUdata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sensor_IMUdata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Sensor.IMUdata";
  }
  protected:
  explicit Sensor_IMUdata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kA1FieldNumber = 1,
    kA2FieldNumber = 2,
    kA3FieldNumber = 3,
    kG1FieldNumber = 4,
    kG2FieldNumber = 5,
    kG3FieldNumber = 6,
  };
  // required float a1 = 1;
  bool has_a1() const;
  private:
  bool _internal_has_a1() const;
  public:
  void clear_a1();
  float a1() const;
  void set_a1(float value);
  private:
  float _internal_a1() const;
  void _internal_set_a1(float value);
  public:

  // required float a2 = 2;
  bool has_a2() const;
  private:
  bool _internal_has_a2() const;
  public:
  void clear_a2();
  float a2() const;
  void set_a2(float value);
  private:
  float _internal_a2() const;
  void _internal_set_a2(float value);
  public:

  // required float a3 = 3;
  bool has_a3() const;
  private:
  bool _internal_has_a3() const;
  public:
  void clear_a3();
  float a3() const;
  void set_a3(float value);
  private:
  float _internal_a3() const;
  void _internal_set_a3(float value);
  public:

  // required float g1 = 4;
  bool has_g1() const;
  private:
  bool _internal_has_g1() const;
  public:
  void clear_g1();
  float g1() const;
  void set_g1(float value);
  private:
  float _internal_g1() const;
  void _internal_set_g1(float value);
  public:

  // required float g2 = 5;
  bool has_g2() const;
  private:
  bool _internal_has_g2() const;
  public:
  void clear_g2();
  float g2() const;
  void set_g2(float value);
  private:
  float _internal_g2() const;
  void _internal_set_g2(float value);
  public:

  // required float g3 = 6;
  bool has_g3() const;
  private:
  bool _internal_has_g3() const;
  public:
  void clear_g3();
  float g3() const;
  void set_g3(float value);
  private:
  float _internal_g3() const;
  void _internal_set_g3(float value);
  public:

  // @@protoc_insertion_point(class_scope:Sensor.IMUdata)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float a1_;
    float a2_;
    float a3_;
    float g1_;
    float g2_;
    float g3_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_2eproto;
};
// -------------------------------------------------------------------

class Sensor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Sensor) */ {
 public:
  inline Sensor() : Sensor(nullptr) {}
  ~Sensor() override;
  explicit PROTOBUF_CONSTEXPR Sensor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sensor(const Sensor& from);
  Sensor(Sensor&& from) noexcept
    : Sensor() {
    *this = ::std::move(from);
  }

  inline Sensor& operator=(const Sensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sensor& operator=(Sensor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sensor& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sensor* internal_default_instance() {
    return reinterpret_cast<const Sensor*>(
               &_Sensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Sensor& a, Sensor& b) {
    a.Swap(&b);
  }
  inline void Swap(Sensor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sensor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sensor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sensor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Sensor& from) {
    Sensor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sensor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Sensor";
  }
  protected:
  explicit Sensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Sensor_IMUdata IMUdata;

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 3,
    kPlayerIDFieldNumber = 1,
    kBeetleIDFieldNumber = 2,
  };
  // repeated .Sensor.IMUdata payload = 3;
  int payload_size() const;
  private:
  int _internal_payload_size() const;
  public:
  void clear_payload();
  ::Sensor_IMUdata* mutable_payload(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Sensor_IMUdata >*
      mutable_payload();
  private:
  const ::Sensor_IMUdata& _internal_payload(int index) const;
  ::Sensor_IMUdata* _internal_add_payload();
  public:
  const ::Sensor_IMUdata& payload(int index) const;
  ::Sensor_IMUdata* add_payload();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Sensor_IMUdata >&
      payload() const;

  // required int32 playerID = 1;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // required int32 beetleID = 2;
  bool has_beetleid() const;
  private:
  bool _internal_has_beetleid() const;
  public:
  void clear_beetleid();
  int32_t beetleid() const;
  void set_beetleid(int32_t value);
  private:
  int32_t _internal_beetleid() const;
  void _internal_set_beetleid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Sensor)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Sensor_IMUdata > payload_;
    int32_t playerid_;
    int32_t beetleid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sensor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sensor_IMUdata

// required float a1 = 1;
inline bool Sensor_IMUdata::_internal_has_a1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Sensor_IMUdata::has_a1() const {
  return _internal_has_a1();
}
inline void Sensor_IMUdata::clear_a1() {
  _impl_.a1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Sensor_IMUdata::_internal_a1() const {
  return _impl_.a1_;
}
inline float Sensor_IMUdata::a1() const {
  // @@protoc_insertion_point(field_get:Sensor.IMUdata.a1)
  return _internal_a1();
}
inline void Sensor_IMUdata::_internal_set_a1(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.a1_ = value;
}
inline void Sensor_IMUdata::set_a1(float value) {
  _internal_set_a1(value);
  // @@protoc_insertion_point(field_set:Sensor.IMUdata.a1)
}

// required float a2 = 2;
inline bool Sensor_IMUdata::_internal_has_a2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Sensor_IMUdata::has_a2() const {
  return _internal_has_a2();
}
inline void Sensor_IMUdata::clear_a2() {
  _impl_.a2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Sensor_IMUdata::_internal_a2() const {
  return _impl_.a2_;
}
inline float Sensor_IMUdata::a2() const {
  // @@protoc_insertion_point(field_get:Sensor.IMUdata.a2)
  return _internal_a2();
}
inline void Sensor_IMUdata::_internal_set_a2(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.a2_ = value;
}
inline void Sensor_IMUdata::set_a2(float value) {
  _internal_set_a2(value);
  // @@protoc_insertion_point(field_set:Sensor.IMUdata.a2)
}

// required float a3 = 3;
inline bool Sensor_IMUdata::_internal_has_a3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Sensor_IMUdata::has_a3() const {
  return _internal_has_a3();
}
inline void Sensor_IMUdata::clear_a3() {
  _impl_.a3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Sensor_IMUdata::_internal_a3() const {
  return _impl_.a3_;
}
inline float Sensor_IMUdata::a3() const {
  // @@protoc_insertion_point(field_get:Sensor.IMUdata.a3)
  return _internal_a3();
}
inline void Sensor_IMUdata::_internal_set_a3(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.a3_ = value;
}
inline void Sensor_IMUdata::set_a3(float value) {
  _internal_set_a3(value);
  // @@protoc_insertion_point(field_set:Sensor.IMUdata.a3)
}

// required float g1 = 4;
inline bool Sensor_IMUdata::_internal_has_g1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Sensor_IMUdata::has_g1() const {
  return _internal_has_g1();
}
inline void Sensor_IMUdata::clear_g1() {
  _impl_.g1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Sensor_IMUdata::_internal_g1() const {
  return _impl_.g1_;
}
inline float Sensor_IMUdata::g1() const {
  // @@protoc_insertion_point(field_get:Sensor.IMUdata.g1)
  return _internal_g1();
}
inline void Sensor_IMUdata::_internal_set_g1(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.g1_ = value;
}
inline void Sensor_IMUdata::set_g1(float value) {
  _internal_set_g1(value);
  // @@protoc_insertion_point(field_set:Sensor.IMUdata.g1)
}

// required float g2 = 5;
inline bool Sensor_IMUdata::_internal_has_g2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Sensor_IMUdata::has_g2() const {
  return _internal_has_g2();
}
inline void Sensor_IMUdata::clear_g2() {
  _impl_.g2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float Sensor_IMUdata::_internal_g2() const {
  return _impl_.g2_;
}
inline float Sensor_IMUdata::g2() const {
  // @@protoc_insertion_point(field_get:Sensor.IMUdata.g2)
  return _internal_g2();
}
inline void Sensor_IMUdata::_internal_set_g2(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.g2_ = value;
}
inline void Sensor_IMUdata::set_g2(float value) {
  _internal_set_g2(value);
  // @@protoc_insertion_point(field_set:Sensor.IMUdata.g2)
}

// required float g3 = 6;
inline bool Sensor_IMUdata::_internal_has_g3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Sensor_IMUdata::has_g3() const {
  return _internal_has_g3();
}
inline void Sensor_IMUdata::clear_g3() {
  _impl_.g3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float Sensor_IMUdata::_internal_g3() const {
  return _impl_.g3_;
}
inline float Sensor_IMUdata::g3() const {
  // @@protoc_insertion_point(field_get:Sensor.IMUdata.g3)
  return _internal_g3();
}
inline void Sensor_IMUdata::_internal_set_g3(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.g3_ = value;
}
inline void Sensor_IMUdata::set_g3(float value) {
  _internal_set_g3(value);
  // @@protoc_insertion_point(field_set:Sensor.IMUdata.g3)
}

// -------------------------------------------------------------------

// Sensor

// required int32 playerID = 1;
inline bool Sensor::_internal_has_playerid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Sensor::has_playerid() const {
  return _internal_has_playerid();
}
inline void Sensor::clear_playerid() {
  _impl_.playerid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Sensor::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t Sensor::playerid() const {
  // @@protoc_insertion_point(field_get:Sensor.playerID)
  return _internal_playerid();
}
inline void Sensor::_internal_set_playerid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.playerid_ = value;
}
inline void Sensor::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Sensor.playerID)
}

// required int32 beetleID = 2;
inline bool Sensor::_internal_has_beetleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Sensor::has_beetleid() const {
  return _internal_has_beetleid();
}
inline void Sensor::clear_beetleid() {
  _impl_.beetleid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Sensor::_internal_beetleid() const {
  return _impl_.beetleid_;
}
inline int32_t Sensor::beetleid() const {
  // @@protoc_insertion_point(field_get:Sensor.beetleID)
  return _internal_beetleid();
}
inline void Sensor::_internal_set_beetleid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.beetleid_ = value;
}
inline void Sensor::set_beetleid(int32_t value) {
  _internal_set_beetleid(value);
  // @@protoc_insertion_point(field_set:Sensor.beetleID)
}

// repeated .Sensor.IMUdata payload = 3;
inline int Sensor::_internal_payload_size() const {
  return _impl_.payload_.size();
}
inline int Sensor::payload_size() const {
  return _internal_payload_size();
}
inline void Sensor::clear_payload() {
  _impl_.payload_.Clear();
}
inline ::Sensor_IMUdata* Sensor::mutable_payload(int index) {
  // @@protoc_insertion_point(field_mutable:Sensor.payload)
  return _impl_.payload_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Sensor_IMUdata >*
Sensor::mutable_payload() {
  // @@protoc_insertion_point(field_mutable_list:Sensor.payload)
  return &_impl_.payload_;
}
inline const ::Sensor_IMUdata& Sensor::_internal_payload(int index) const {
  return _impl_.payload_.Get(index);
}
inline const ::Sensor_IMUdata& Sensor::payload(int index) const {
  // @@protoc_insertion_point(field_get:Sensor.payload)
  return _internal_payload(index);
}
inline ::Sensor_IMUdata* Sensor::_internal_add_payload() {
  return _impl_.payload_.Add();
}
inline ::Sensor_IMUdata* Sensor::add_payload() {
  ::Sensor_IMUdata* _add = _internal_add_payload();
  // @@protoc_insertion_point(field_add:Sensor.payload)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Sensor_IMUdata >&
Sensor::payload() const {
  // @@protoc_insertion_point(field_list:Sensor.payload)
  return _impl_.payload_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sensor_2eproto
