// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mlp_HLS,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.770400,HLS_SYN_LAT=124740,HLS_SYN_TPT=none,HLS_SYN_MEM=43,HLS_SYN_DSP=5,HLS_SYN_FF=1487,HLS_SYN_LUT=1978,HLS_VERSION=2020_1}" *)

module mlp_HLS (
        ap_clk,
        ap_rst_n,
        S_AXIS_TDATA,
        S_AXIS_TVALID,
        S_AXIS_TREADY,
        S_AXIS_TLAST,
        M_AXIS_TDATA,
        M_AXIS_TVALID,
        M_AXIS_TREADY,
        M_AXIS_TLAST
);

parameter    ap_ST_fsm_state1 = 52'd1;
parameter    ap_ST_fsm_state2 = 52'd2;
parameter    ap_ST_fsm_state3 = 52'd4;
parameter    ap_ST_fsm_state4 = 52'd8;
parameter    ap_ST_fsm_state5 = 52'd16;
parameter    ap_ST_fsm_state6 = 52'd32;
parameter    ap_ST_fsm_state7 = 52'd64;
parameter    ap_ST_fsm_state8 = 52'd128;
parameter    ap_ST_fsm_state9 = 52'd256;
parameter    ap_ST_fsm_state10 = 52'd512;
parameter    ap_ST_fsm_state11 = 52'd1024;
parameter    ap_ST_fsm_state12 = 52'd2048;
parameter    ap_ST_fsm_state13 = 52'd4096;
parameter    ap_ST_fsm_state14 = 52'd8192;
parameter    ap_ST_fsm_state15 = 52'd16384;
parameter    ap_ST_fsm_state16 = 52'd32768;
parameter    ap_ST_fsm_state17 = 52'd65536;
parameter    ap_ST_fsm_state18 = 52'd131072;
parameter    ap_ST_fsm_state19 = 52'd262144;
parameter    ap_ST_fsm_state20 = 52'd524288;
parameter    ap_ST_fsm_state21 = 52'd1048576;
parameter    ap_ST_fsm_state22 = 52'd2097152;
parameter    ap_ST_fsm_state23 = 52'd4194304;
parameter    ap_ST_fsm_state24 = 52'd8388608;
parameter    ap_ST_fsm_state25 = 52'd16777216;
parameter    ap_ST_fsm_state26 = 52'd33554432;
parameter    ap_ST_fsm_state27 = 52'd67108864;
parameter    ap_ST_fsm_state28 = 52'd134217728;
parameter    ap_ST_fsm_state29 = 52'd268435456;
parameter    ap_ST_fsm_state30 = 52'd536870912;
parameter    ap_ST_fsm_state31 = 52'd1073741824;
parameter    ap_ST_fsm_state32 = 52'd2147483648;
parameter    ap_ST_fsm_state33 = 52'd4294967296;
parameter    ap_ST_fsm_state34 = 52'd8589934592;
parameter    ap_ST_fsm_state35 = 52'd17179869184;
parameter    ap_ST_fsm_state36 = 52'd34359738368;
parameter    ap_ST_fsm_state37 = 52'd68719476736;
parameter    ap_ST_fsm_state38 = 52'd137438953472;
parameter    ap_ST_fsm_state39 = 52'd274877906944;
parameter    ap_ST_fsm_state40 = 52'd549755813888;
parameter    ap_ST_fsm_state41 = 52'd1099511627776;
parameter    ap_ST_fsm_state42 = 52'd2199023255552;
parameter    ap_ST_fsm_state43 = 52'd4398046511104;
parameter    ap_ST_fsm_state44 = 52'd8796093022208;
parameter    ap_ST_fsm_state45 = 52'd17592186044416;
parameter    ap_ST_fsm_state46 = 52'd35184372088832;
parameter    ap_ST_fsm_state47 = 52'd70368744177664;
parameter    ap_ST_fsm_state48 = 52'd140737488355328;
parameter    ap_ST_fsm_state49 = 52'd281474976710656;
parameter    ap_ST_fsm_state50 = 52'd562949953421312;
parameter    ap_ST_fsm_state51 = 52'd1125899906842624;
parameter    ap_ST_fsm_state52 = 52'd2251799813685248;

input   ap_clk;
input   ap_rst_n;
input  [31:0] S_AXIS_TDATA;
input   S_AXIS_TVALID;
output   S_AXIS_TREADY;
input   S_AXIS_TLAST;
output  [31:0] M_AXIS_TDATA;
output   M_AXIS_TVALID;
input   M_AXIS_TREADY;
output   M_AXIS_TLAST;

reg S_AXIS_TREADY;

 reg    ap_rst_n_inv;
wire   [6:0] layer1Bias_address0;
reg    layer1Bias_ce0;
wire   [31:0] layer1Bias_q0;
reg   [12:0] layer1Weight_address0;
reg    layer1Weight_ce0;
wire   [31:0] layer1Weight_q0;
wire   [6:0] layer2Bias_address0;
reg    layer2Bias_ce0;
wire   [31:0] layer2Bias_q0;
reg   [13:0] layer2Weight_address0;
reg    layer2Weight_ce0;
wire   [31:0] layer2Weight_q0;
reg   [8:0] outputWeight_address0;
reg    outputWeight_ce0;
wire   [31:0] outputWeight_q0;
reg    S_AXIS_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [51:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln60_fu_731_p2;
reg    M_AXIS_TDATA_blk_n;
wire    ap_CS_fsm_state51;
wire   [0:0] icmp_ln138_fu_1263_p2;
wire    ap_CS_fsm_state52;
wire   [31:0] training_input_q0;
reg   [31:0] reg_551;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state11;
reg   [31:0] reg_555;
wire   [31:0] grp_fu_540_p2;
reg   [31:0] reg_560;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state45;
wire   [31:0] grp_fu_533_p2;
reg   [31:0] reg_565;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state49;
wire   [31:0] hidden1Layer_q0;
reg   [31:0] reg_577;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state27;
reg   [31:0] reg_582;
wire   [31:0] hidden2Layer_q0;
reg   [31:0] reg_587;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state42;
reg   [31:0] reg_592;
wire   [1:0] add_ln57_fu_609_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] select_ln57_2_fu_649_p3;
reg   [31:0] select_ln57_2_reg_1342;
wire   [31:0] select_ln57_5_fu_673_p3;
reg   [31:0] select_ln57_5_reg_1347;
wire   [31:0] select_ln57_7_fu_689_p3;
reg   [31:0] select_ln57_7_reg_1352;
wire   [31:0] select_ln57_8_fu_697_p3;
reg   [31:0] select_ln57_8_reg_1357;
wire   [5:0] i_fu_737_p2;
reg    ap_block_state3;
wire   [12:0] add_ln79_fu_753_p2;
reg   [12:0] add_ln79_reg_1373;
wire    ap_CS_fsm_state4;
wire   [6:0] j_fu_765_p2;
reg   [6:0] j_reg_1381;
wire   [63:0] zext_ln80_fu_771_p1;
reg   [63:0] zext_ln80_reg_1386;
wire   [0:0] icmp_ln79_fu_759_p2;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln81_fu_776_p2;
wire   [31:0] bitcast_ln85_fu_802_p1;
wire    ap_CS_fsm_state8;
wire   [5:0] add_ln81_fu_833_p2;
reg   [5:0] add_ln81_reg_1429;
wire   [31:0] bitcast_ln85_1_fu_839_p1;
wire    ap_CS_fsm_state12;
wire   [6:0] j_2_fu_901_p2;
reg   [6:0] j_2_reg_1442;
wire    ap_CS_fsm_state20;
wire   [63:0] zext_ln97_fu_907_p1;
reg   [63:0] zext_ln97_reg_1447;
wire   [0:0] icmp_ln96_fu_895_p2;
wire   [14:0] sub_ln100_fu_936_p2;
reg   [14:0] sub_ln100_reg_1481;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire   [0:0] icmp_ln98_fu_942_p2;
wire   [6:0] add_ln98_fu_992_p2;
reg   [6:0] add_ln98_reg_1515;
wire   [2:0] j_1_fu_1055_p2;
reg   [2:0] j_1_reg_1523;
wire    ap_CS_fsm_state36;
wire   [9:0] sub_ln127_fu_1081_p2;
reg   [9:0] sub_ln127_reg_1528;
wire   [0:0] icmp_ln123_fu_1049_p2;
wire   [1:0] trunc_ln124_fu_1087_p1;
reg   [1:0] trunc_ln124_reg_1534;
wire   [31:0] activation_2_fu_1091_p6;
wire    ap_CS_fsm_state37;
wire   [0:0] icmp_ln125_fu_1121_p2;
wire   [6:0] add_ln125_fu_1191_p2;
reg   [6:0] add_ln125_reg_1594;
wire   [2:0] i_2_fu_1203_p2;
wire    ap_CS_fsm_state50;
wire   [2:0] i_3_fu_1269_p2;
reg   [2:0] i_3_reg_1613;
wire    regslice_both_M_AXIS_V_data_U_apdone_blk;
reg    ap_block_state51_io;
wire   [31:0] write_output_data_fu_1291_p6;
reg   [5:0] training_input_address0;
reg    training_input_ce0;
reg    training_input_we0;
reg   [6:0] hidden1Layer_address0;
reg    hidden1Layer_ce0;
reg    hidden1Layer_we0;
wire   [31:0] hidden1Layer_d0;
reg   [6:0] hidden2Layer_address0;
reg    hidden2Layer_ce0;
reg    hidden2Layer_we0;
wire   [31:0] hidden2Layer_d0;
reg   [1:0] phi_ln57_reg_377;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln57_fu_705_p2;
reg   [5:0] i_0_reg_388;
reg   [6:0] j_0_reg_399;
wire    ap_CS_fsm_state19;
reg   [12:0] phi_mul_reg_410;
reg   [31:0] activation_0_0_reg_422;
reg   [5:0] k_0_0_reg_432;
reg   [6:0] j1_0_reg_444;
wire    ap_CS_fsm_state35;
reg   [31:0] activation2_0_0_reg_456;
reg   [6:0] k3_0_0_reg_466;
reg   [2:0] j4_0_reg_478;
reg   [31:0] outputLayer_0_reg_489;
reg   [6:0] k6_0_0_reg_499;
reg   [2:0] i7_0_reg_511;
wire   [0:0] icmp_ln132_fu_1197_p2;
reg   [2:0] i8_0_reg_522;
wire   [63:0] zext_ln62_fu_748_p1;
wire   [63:0] zext_ln85_1_fu_797_p1;
wire   [63:0] zext_ln84_fu_782_p1;
wire   [63:0] zext_ln85_3_fu_828_p1;
wire   [63:0] zext_ln84_1_fu_813_p1;
wire  signed [63:0] sext_ln100_fu_962_p1;
wire   [63:0] zext_ln100_fu_948_p1;
wire  signed [63:0] sext_ln100_1_fu_987_p1;
wire   [63:0] zext_ln100_1_fu_973_p1;
wire  signed [63:0] sext_ln127_fu_1141_p1;
wire   [63:0] zext_ln127_fu_1127_p1;
wire  signed [63:0] sext_ln127_1_fu_1186_p1;
wire   [63:0] zext_ln127_1_fu_1172_p1;
reg   [31:0] output_0_0_fu_132;
reg   [31:0] output_1_0_fu_136;
reg   [31:0] output_2_0_fu_140;
reg   [31:0] output_3_0_fu_144;
reg   [31:0] outputLayer_3_fu_160;
reg   [31:0] outputLayer_3_1_fu_164;
reg   [31:0] outputLayer_3_2_fu_168;
reg   [31:0] outputLayer_3_3_fu_172;
reg   [31:0] output_3_fu_176;
wire   [31:0] output_0_fu_1239_p1;
wire   [1:0] trunc_ln134_fu_1221_p1;
reg   [31:0] output_3_1_fu_180;
reg   [31:0] output_3_3_fu_184;
reg   [31:0] output_3_2_fu_188;
reg   [31:0] grp_fu_533_p0;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state46;
reg   [31:0] grp_fu_540_p0;
reg   [31:0] grp_fu_540_p1;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state43;
reg   [31:0] grp_fu_544_p0;
wire   [0:0] icmp_ln57_1_fu_615_p2;
wire   [0:0] icmp_ln57_2_fu_629_p2;
wire   [31:0] select_ln57_fu_621_p3;
wire   [0:0] icmp_ln57_3_fu_643_p2;
wire   [31:0] select_ln57_1_fu_635_p3;
wire   [31:0] select_ln57_3_fu_657_p3;
wire   [31:0] select_ln57_4_fu_665_p3;
wire   [31:0] select_ln57_6_fu_681_p3;
wire   [12:0] zext_ln85_fu_787_p1;
wire   [12:0] add_ln85_fu_791_p2;
wire   [5:0] or_ln81_fu_807_p2;
wire   [12:0] zext_ln85_2_fu_818_p1;
wire   [12:0] add_ln85_1_fu_822_p2;
wire   [31:0] bitcast_ln88_fu_844_p1;
wire   [7:0] tmp_fu_848_p4;
wire   [22:0] trunc_ln88_fu_858_p1;
wire   [0:0] icmp_ln88_1_fu_868_p2;
wire   [0:0] icmp_ln88_fu_862_p2;
wire   [0:0] or_ln88_fu_874_p2;
wire   [0:0] grp_fu_544_p2;
wire   [0:0] and_ln88_fu_880_p2;
wire   [13:0] tmp_3_fu_912_p3;
wire   [10:0] tmp_9_fu_924_p3;
wire   [14:0] zext_ln100_2_fu_920_p1;
wire   [14:0] zext_ln100_3_fu_932_p1;
wire   [14:0] zext_ln100_4_fu_953_p1;
wire   [14:0] add_ln100_fu_957_p2;
wire   [6:0] or_ln98_fu_967_p2;
wire   [14:0] zext_ln100_5_fu_978_p1;
wire   [14:0] add_ln100_1_fu_982_p2;
wire   [31:0] bitcast_ln102_fu_998_p1;
wire   [7:0] tmp_4_fu_1002_p4;
wire   [22:0] trunc_ln102_fu_1012_p1;
wire   [0:0] icmp_ln102_1_fu_1022_p2;
wire   [0:0] icmp_ln102_fu_1016_p2;
wire   [0:0] or_ln102_fu_1028_p2;
wire   [0:0] and_ln102_fu_1034_p2;
wire   [6:0] tmp_10_fu_1069_p3;
wire   [9:0] tmp_s_fu_1061_p3;
wire   [9:0] zext_ln127_2_fu_1077_p1;
wire   [1:0] activation_2_fu_1091_p5;
wire   [9:0] zext_ln127_3_fu_1132_p1;
wire   [9:0] add_ln127_fu_1136_p2;
wire   [6:0] or_ln125_fu_1166_p2;
wire   [9:0] zext_ln127_4_fu_1177_p1;
wire   [9:0] add_ln127_1_fu_1181_p2;
wire   [1:0] tmp_8_fu_1225_p5;
wire   [31:0] tmp_8_fu_1225_p6;
wire   [1:0] write_output_data_fu_1291_p5;
reg   [51:0] ap_NS_fsm;
wire    regslice_both_S_AXIS_V_data_U_apdone_blk;
wire   [31:0] S_AXIS_TDATA_int;
wire    S_AXIS_TVALID_int;
reg    S_AXIS_TREADY_int;
wire    regslice_both_S_AXIS_V_data_U_ack_in;
wire    regslice_both_w1_S_AXIS_V_last_U_apdone_blk;
wire    S_AXIS_TLAST_int;
wire    regslice_both_w1_S_AXIS_V_last_U_vld_out;
wire    regslice_both_w1_S_AXIS_V_last_U_ack_in;
reg    M_AXIS_TVALID_int;
wire    M_AXIS_TREADY_int;
wire    regslice_both_M_AXIS_V_data_U_vld_out;
wire    regslice_both_w1_M_AXIS_V_last_U_apdone_blk;
wire    M_AXIS_TLAST_int;
wire    regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy;
wire    regslice_both_w1_M_AXIS_V_last_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 52'd1;
end

mlp_HLS_layer1Bias #(
    .DataWidth( 32 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
layer1Bias_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layer1Bias_address0),
    .ce0(layer1Bias_ce0),
    .q0(layer1Bias_q0)
);

mlp_HLS_layer1Weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 6048 ),
    .AddressWidth( 13 ))
layer1Weight_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layer1Weight_address0),
    .ce0(layer1Weight_ce0),
    .q0(layer1Weight_q0)
);

mlp_HLS_layer2Bias #(
    .DataWidth( 32 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
layer2Bias_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layer2Bias_address0),
    .ce0(layer2Bias_ce0),
    .q0(layer2Bias_q0)
);

mlp_HLS_layer2Weicud #(
    .DataWidth( 32 ),
    .AddressRange( 12544 ),
    .AddressWidth( 14 ))
layer2Weight_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layer2Weight_address0),
    .ce0(layer2Weight_ce0),
    .q0(layer2Weight_q0)
);

mlp_HLS_outputWeidEe #(
    .DataWidth( 32 ),
    .AddressRange( 448 ),
    .AddressWidth( 9 ))
outputWeight_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(outputWeight_address0),
    .ce0(outputWeight_ce0),
    .q0(outputWeight_q0)
);

mlp_HLS_training_eOg #(
    .DataWidth( 32 ),
    .AddressRange( 54 ),
    .AddressWidth( 6 ))
training_input_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(training_input_address0),
    .ce0(training_input_ce0),
    .we0(training_input_we0),
    .d0(S_AXIS_TDATA_int),
    .q0(training_input_q0)
);

mlp_HLS_hidden1LafYi #(
    .DataWidth( 32 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
hidden1Layer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hidden1Layer_address0),
    .ce0(hidden1Layer_ce0),
    .we0(hidden1Layer_we0),
    .d0(hidden1Layer_d0),
    .q0(hidden1Layer_q0)
);

mlp_HLS_hidden1LafYi #(
    .DataWidth( 32 ),
    .AddressRange( 112 ),
    .AddressWidth( 7 ))
hidden2Layer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hidden2Layer_address0),
    .ce0(hidden2Layer_ce0),
    .we0(hidden2Layer_we0),
    .d0(hidden2Layer_d0),
    .q0(hidden2Layer_q0)
);

mlp_HLS_fadd_32nshbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mlp_HLS_fadd_32nshbi_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_533_p0),
    .din1(reg_560),
    .ce(1'b1),
    .dout(grp_fu_533_p2)
);

mlp_HLS_fmul_32nsibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mlp_HLS_fmul_32nsibs_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_540_p0),
    .din1(grp_fu_540_p1),
    .ce(1'b1),
    .dout(grp_fu_540_p2)
);

mlp_HLS_fcmp_32nsjbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
mlp_HLS_fcmp_32nsjbC_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_544_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_544_p2)
);

mlp_HLS_mux_42_32kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mlp_HLS_mux_42_32kbM_U4(
    .din0(32'd1020358796),
    .din1(32'd976195651),
    .din2(32'd3156319342),
    .din3(32'd3164722076),
    .din4(activation_2_fu_1091_p5),
    .dout(activation_2_fu_1091_p6)
);

mlp_HLS_mux_42_32kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mlp_HLS_mux_42_32kbM_U5(
    .din0(outputLayer_3_fu_160),
    .din1(outputLayer_3_1_fu_164),
    .din2(outputLayer_3_2_fu_168),
    .din3(outputLayer_3_3_fu_172),
    .din4(tmp_8_fu_1225_p5),
    .dout(tmp_8_fu_1225_p6)
);

mlp_HLS_mux_42_32kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mlp_HLS_mux_42_32kbM_U6(
    .din0(output_3_fu_176),
    .din1(output_3_1_fu_180),
    .din2(output_3_3_fu_184),
    .din3(output_3_2_fu_188),
    .din4(write_output_data_fu_1291_p5),
    .dout(write_output_data_fu_1291_p6)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_S_AXIS_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TDATA),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_S_AXIS_V_data_U_ack_in),
    .data_out(S_AXIS_TDATA_int),
    .vld_out(S_AXIS_TVALID_int),
    .ack_out(S_AXIS_TREADY_int),
    .apdone_blk(regslice_both_S_AXIS_V_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_S_AXIS_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TLAST),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_w1_S_AXIS_V_last_U_ack_in),
    .data_out(S_AXIS_TLAST_int),
    .vld_out(regslice_both_w1_S_AXIS_V_last_U_vld_out),
    .ack_out(S_AXIS_TREADY_int),
    .apdone_blk(regslice_both_w1_S_AXIS_V_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_M_AXIS_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(write_output_data_fu_1291_p6),
    .vld_in(M_AXIS_TVALID_int),
    .ack_in(M_AXIS_TREADY_int),
    .data_out(M_AXIS_TDATA),
    .vld_out(regslice_both_M_AXIS_V_data_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_M_AXIS_V_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_M_AXIS_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(M_AXIS_TLAST_int),
    .vld_in(M_AXIS_TVALID_int),
    .ack_in(regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy),
    .data_out(M_AXIS_TLAST),
    .vld_out(regslice_both_w1_M_AXIS_V_last_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_w1_M_AXIS_V_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        activation2_0_0_reg_456 <= grp_fu_533_p2;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        activation2_0_0_reg_456 <= layer2Bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        activation_0_0_reg_422 <= grp_fu_533_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        activation_0_0_reg_422 <= layer1Bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state50) & (icmp_ln132_fu_1197_p2 == 1'd0))) begin
        i7_0_reg_511 <= i_2_fu_1203_p2;
    end else if (((icmp_ln123_fu_1049_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        i7_0_reg_511 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln132_fu_1197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
        i8_0_reg_522 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state52) & (1'b1 == M_AXIS_TREADY_int))) begin
        i8_0_reg_522 <= i_3_reg_1613;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln57_fu_705_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_388 <= 6'd0;
    end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln60_fu_731_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_731_p2 == 1'd0))) begin
        i_0_reg_388 <= i_fu_737_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln79_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j1_0_reg_444 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        j1_0_reg_444 <= j_2_reg_1442;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_fu_1121_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        j4_0_reg_478 <= j_1_reg_1523;
    end else if (((icmp_ln96_fu_895_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        j4_0_reg_478 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln60_fu_731_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_731_p2 == 1'd1))) begin
        j_0_reg_399 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        j_0_reg_399 <= j_reg_1381;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        k3_0_0_reg_466 <= add_ln98_reg_1515;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        k3_0_0_reg_466 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        k6_0_0_reg_499 <= add_ln125_reg_1594;
    end else if (((1'b1 == ap_CS_fsm_state36) & (icmp_ln123_fu_1049_p2 == 1'd0))) begin
        k6_0_0_reg_499 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        k_0_0_reg_432 <= add_ln81_reg_1429;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_0_reg_432 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        outputLayer_0_reg_489 <= grp_fu_533_p2;
    end else if (((1'b1 == ap_CS_fsm_state36) & (icmp_ln123_fu_1049_p2 == 1'd0))) begin
        outputLayer_0_reg_489 <= activation_2_fu_1091_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln134_fu_1221_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state50) & (icmp_ln132_fu_1197_p2 == 1'd0))) begin
        output_3_1_fu_180 <= output_0_fu_1239_p1;
    end else if (((icmp_ln123_fu_1049_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        output_3_1_fu_180 <= select_ln57_7_reg_1352;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln134_fu_1221_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state50) & (icmp_ln132_fu_1197_p2 == 1'd0))) begin
        output_3_2_fu_188 <= output_0_fu_1239_p1;
    end else if (((icmp_ln123_fu_1049_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        output_3_2_fu_188 <= select_ln57_2_reg_1342;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln134_fu_1221_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state50) & (icmp_ln132_fu_1197_p2 == 1'd0))) begin
        output_3_3_fu_184 <= output_0_fu_1239_p1;
    end else if (((icmp_ln123_fu_1049_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        output_3_3_fu_184 <= select_ln57_5_reg_1347;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln134_fu_1221_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state50) & (icmp_ln132_fu_1197_p2 == 1'd0))) begin
        output_3_fu_176 <= output_0_fu_1239_p1;
    end else if (((icmp_ln123_fu_1049_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        output_3_fu_176 <= select_ln57_8_reg_1357;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln57_fu_705_p2 == 1'd0))) begin
        phi_ln57_reg_377 <= add_ln57_fu_609_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        phi_ln57_reg_377 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln60_fu_731_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_731_p2 == 1'd1))) begin
        phi_mul_reg_410 <= 13'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        phi_mul_reg_410 <= add_ln79_reg_1373;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        add_ln125_reg_1594 <= add_ln125_fu_1191_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln79_reg_1373 <= add_ln79_fu_753_p2;
        j_reg_1381 <= j_fu_765_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln81_reg_1429 <= add_ln81_fu_833_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        add_ln98_reg_1515 <= add_ln98_fu_992_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state51_io)) & (1'b1 == ap_CS_fsm_state51))) begin
        i_3_reg_1613 <= i_3_fu_1269_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        j_1_reg_1523 <= j_1_fu_1055_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        j_2_reg_1442 <= j_2_fu_901_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_fu_1121_p2 == 1'd1) & (trunc_ln124_reg_1534 == 2'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        outputLayer_3_1_fu_164 <= outputLayer_0_reg_489;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_fu_1121_p2 == 1'd1) & (trunc_ln124_reg_1534 == 2'd2) & (1'b1 == ap_CS_fsm_state37))) begin
        outputLayer_3_2_fu_168 <= outputLayer_0_reg_489;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_fu_1121_p2 == 1'd1) & (trunc_ln124_reg_1534 == 2'd3) & (1'b1 == ap_CS_fsm_state37))) begin
        outputLayer_3_3_fu_172 <= outputLayer_0_reg_489;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_fu_1121_p2 == 1'd1) & (trunc_ln124_reg_1534 == 2'd0) & (1'b1 == ap_CS_fsm_state37))) begin
        outputLayer_3_fu_160 <= outputLayer_0_reg_489;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        output_0_0_fu_132 <= select_ln57_8_fu_697_p3;
        output_1_0_fu_136 <= select_ln57_7_fu_689_p3;
        output_2_0_fu_140 <= select_ln57_5_fu_673_p3;
        output_3_0_fu_144 <= select_ln57_2_fu_649_p3;
        select_ln57_2_reg_1342 <= select_ln57_2_fu_649_p3;
        select_ln57_5_reg_1347 <= select_ln57_5_fu_673_p3;
        select_ln57_7_reg_1352 <= select_ln57_7_fu_689_p3;
        select_ln57_8_reg_1357 <= select_ln57_8_fu_697_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_551 <= training_input_q0;
        reg_555 <= layer1Weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_560 <= grp_fu_540_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_565 <= grp_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_577 <= hidden1Layer_q0;
        reg_582 <= layer2Weight_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state38))) begin
        reg_587 <= hidden2Layer_q0;
        reg_592 <= outputWeight_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        sub_ln100_reg_1481[14 : 4] <= sub_ln100_fu_936_p2[14 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & (icmp_ln123_fu_1049_p2 == 1'd0))) begin
        sub_ln127_reg_1528[9 : 4] <= sub_ln127_fu_1081_p2[9 : 4];
        trunc_ln124_reg_1534 <= trunc_ln124_fu_1087_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln79_fu_759_p2 == 1'd0))) begin
        zext_ln80_reg_1386[6 : 0] <= zext_ln80_fu_771_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln96_fu_895_p2 == 1'd0))) begin
        zext_ln97_reg_1447[6 : 0] <= zext_ln97_fu_907_p1[6 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | ((1'b1 == ap_CS_fsm_state51) & (icmp_ln138_fu_1263_p2 == 1'd0)))) begin
        M_AXIS_TDATA_blk_n = M_AXIS_TREADY_int;
    end else begin
        M_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state51_io)) & (1'b1 == ap_CS_fsm_state51) & (icmp_ln138_fu_1263_p2 == 1'd0))) begin
        M_AXIS_TVALID_int = 1'b1;
    end else begin
        M_AXIS_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_731_p2 == 1'd0))) begin
        S_AXIS_TDATA_blk_n = S_AXIS_TVALID_int;
    end else begin
        S_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == S_AXIS_TVALID) & (regslice_both_S_AXIS_V_data_U_ack_in == 1'b1))) begin
        S_AXIS_TREADY = 1'b1;
    end else begin
        S_AXIS_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln60_fu_731_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_731_p2 == 1'd0))) begin
        S_AXIS_TREADY_int = 1'b1;
    end else begin
        S_AXIS_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_533_p0 = outputLayer_0_reg_489;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_533_p0 = activation2_0_0_reg_456;
    end else if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_533_p0 = reg_565;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_533_p0 = activation_0_0_reg_422;
    end else begin
        grp_fu_533_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state39))) begin
        grp_fu_540_p0 = reg_587;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_540_p0 = reg_577;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_540_p0 = bitcast_ln85_1_fu_839_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_540_p0 = bitcast_ln85_fu_802_p1;
    end else begin
        grp_fu_540_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state39))) begin
        grp_fu_540_p1 = reg_592;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_540_p1 = reg_582;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_540_p1 = reg_555;
    end else begin
        grp_fu_540_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_544_p0 = activation2_0_0_reg_456;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_544_p0 = activation_0_0_reg_422;
    end else begin
        grp_fu_544_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        hidden1Layer_address0 = zext_ln100_1_fu_973_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        hidden1Layer_address0 = zext_ln100_fu_948_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        hidden1Layer_address0 = zext_ln80_reg_1386;
    end else begin
        hidden1Layer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state26))) begin
        hidden1Layer_ce0 = 1'b1;
    end else begin
        hidden1Layer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        hidden1Layer_we0 = 1'b1;
    end else begin
        hidden1Layer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        hidden2Layer_address0 = zext_ln127_1_fu_1172_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        hidden2Layer_address0 = zext_ln127_fu_1127_p1;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        hidden2Layer_address0 = zext_ln97_reg_1447;
    end else begin
        hidden2Layer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state41))) begin
        hidden2Layer_ce0 = 1'b1;
    end else begin
        hidden2Layer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        hidden2Layer_we0 = 1'b1;
    end else begin
        hidden2Layer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        layer1Bias_ce0 = 1'b1;
    end else begin
        layer1Bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        layer1Weight_address0 = zext_ln85_3_fu_828_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        layer1Weight_address0 = zext_ln85_1_fu_797_p1;
    end else begin
        layer1Weight_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10))) begin
        layer1Weight_ce0 = 1'b1;
    end else begin
        layer1Weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        layer2Bias_ce0 = 1'b1;
    end else begin
        layer2Bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        layer2Weight_address0 = sext_ln100_1_fu_987_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        layer2Weight_address0 = sext_ln100_fu_962_p1;
    end else begin
        layer2Weight_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state26))) begin
        layer2Weight_ce0 = 1'b1;
    end else begin
        layer2Weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        outputWeight_address0 = sext_ln127_1_fu_1186_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        outputWeight_address0 = sext_ln127_fu_1141_p1;
    end else begin
        outputWeight_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state41))) begin
        outputWeight_ce0 = 1'b1;
    end else begin
        outputWeight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        training_input_address0 = zext_ln84_1_fu_813_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        training_input_address0 = zext_ln84_fu_782_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        training_input_address0 = zext_ln62_fu_748_p1;
    end else begin
        training_input_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10) | (~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln60_fu_731_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        training_input_ce0 = 1'b1;
    end else begin
        training_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln60_fu_731_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_731_p2 == 1'd0))) begin
        training_input_we0 = 1'b1;
    end else begin
        training_input_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln57_fu_705_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln60_fu_731_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_731_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((1'b0 == S_AXIS_TVALID_int) & (icmp_ln60_fu_731_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln60_fu_731_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln79_fu_759_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln81_fu_776_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state20 : begin
            if (((icmp_ln96_fu_895_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln98_fu_942_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state36 : begin
            if (((icmp_ln123_fu_1049_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((icmp_ln125_fu_1121_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state50 : begin
            if (((icmp_ln132_fu_1197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if ((~((regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state51_io)) & (1'b1 == ap_CS_fsm_state51) & (icmp_ln138_fu_1263_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state51_io)) & (1'b1 == ap_CS_fsm_state51) & (icmp_ln138_fu_1263_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((1'b1 == ap_CS_fsm_state52) & (1'b1 == M_AXIS_TREADY_int))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_AXIS_TLAST_int = ((i8_0_reg_522 == 3'd3) ? 1'b1 : 1'b0);

assign M_AXIS_TVALID = regslice_both_M_AXIS_V_data_U_vld_out;

assign activation_2_fu_1091_p5 = j4_0_reg_478[1:0];

assign add_ln100_1_fu_982_p2 = (sub_ln100_reg_1481 + zext_ln100_5_fu_978_p1);

assign add_ln100_fu_957_p2 = (sub_ln100_reg_1481 + zext_ln100_4_fu_953_p1);

assign add_ln125_fu_1191_p2 = (k6_0_0_reg_499 + 7'd2);

assign add_ln127_1_fu_1181_p2 = (sub_ln127_reg_1528 + zext_ln127_4_fu_1177_p1);

assign add_ln127_fu_1136_p2 = (sub_ln127_reg_1528 + zext_ln127_3_fu_1132_p1);

assign add_ln57_fu_609_p2 = (phi_ln57_reg_377 + 2'd1);

assign add_ln79_fu_753_p2 = (phi_mul_reg_410 + 13'd54);

assign add_ln81_fu_833_p2 = (k_0_0_reg_432 + 6'd2);

assign add_ln85_1_fu_822_p2 = (phi_mul_reg_410 + zext_ln85_2_fu_818_p1);

assign add_ln85_fu_791_p2 = (phi_mul_reg_410 + zext_ln85_fu_787_p1);

assign add_ln98_fu_992_p2 = (k3_0_0_reg_466 + 7'd2);

assign and_ln102_fu_1034_p2 = (or_ln102_fu_1028_p2 & grp_fu_544_p2);

assign and_ln88_fu_880_p2 = (or_ln88_fu_874_p2 & grp_fu_544_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state3 = ((1'b0 == S_AXIS_TVALID_int) & (icmp_ln60_fu_731_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state51_io = ((1'b0 == M_AXIS_TREADY_int) & (icmp_ln138_fu_1263_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln102_fu_998_p1 = activation2_0_0_reg_456;

assign bitcast_ln85_1_fu_839_p1 = reg_551;

assign bitcast_ln85_fu_802_p1 = reg_551;

assign bitcast_ln88_fu_844_p1 = activation_0_0_reg_422;

assign hidden1Layer_d0 = ((and_ln88_fu_880_p2[0:0] === 1'b1) ? 32'd0 : activation_0_0_reg_422);

assign hidden2Layer_d0 = ((and_ln102_fu_1034_p2[0:0] === 1'b1) ? 32'd0 : activation2_0_0_reg_456);

assign i_2_fu_1203_p2 = (i7_0_reg_511 + 3'd1);

assign i_3_fu_1269_p2 = (i8_0_reg_522 + 3'd1);

assign i_fu_737_p2 = (i_0_reg_388 + 6'd1);

assign icmp_ln102_1_fu_1022_p2 = ((trunc_ln102_fu_1012_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_1016_p2 = ((tmp_4_fu_1002_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln123_fu_1049_p2 = ((j4_0_reg_478 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln125_fu_1121_p2 = ((k6_0_0_reg_499 == 7'd112) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_1197_p2 = ((i7_0_reg_511 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln138_fu_1263_p2 = ((i8_0_reg_522 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln57_1_fu_615_p2 = ((phi_ln57_reg_377 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln57_2_fu_629_p2 = ((phi_ln57_reg_377 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln57_3_fu_643_p2 = ((phi_ln57_reg_377 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_705_p2 = ((phi_ln57_reg_377 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_731_p2 = ((i_0_reg_388 == 6'd54) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_759_p2 = ((j_0_reg_399 == 7'd112) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_776_p2 = ((k_0_0_reg_432 == 6'd54) ? 1'b1 : 1'b0);

assign icmp_ln88_1_fu_868_p2 = ((trunc_ln88_fu_858_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_862_p2 = ((tmp_fu_848_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_895_p2 = ((j1_0_reg_444 == 7'd112) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_942_p2 = ((k3_0_0_reg_466 == 7'd112) ? 1'b1 : 1'b0);

assign j_1_fu_1055_p2 = (j4_0_reg_478 + 3'd1);

assign j_2_fu_901_p2 = (j1_0_reg_444 + 7'd1);

assign j_fu_765_p2 = (j_0_reg_399 + 7'd1);

assign layer1Bias_address0 = zext_ln80_fu_771_p1;

assign layer2Bias_address0 = zext_ln97_fu_907_p1;

assign or_ln102_fu_1028_p2 = (icmp_ln102_fu_1016_p2 | icmp_ln102_1_fu_1022_p2);

assign or_ln125_fu_1166_p2 = (k6_0_0_reg_499 | 7'd1);

assign or_ln81_fu_807_p2 = (k_0_0_reg_432 | 6'd1);

assign or_ln88_fu_874_p2 = (icmp_ln88_fu_862_p2 | icmp_ln88_1_fu_868_p2);

assign or_ln98_fu_967_p2 = (k3_0_0_reg_466 | 7'd1);

assign output_0_fu_1239_p1 = tmp_8_fu_1225_p6;

assign select_ln57_1_fu_635_p3 = ((icmp_ln57_2_fu_629_p2[0:0] === 1'b1) ? output_3_0_fu_144 : select_ln57_fu_621_p3);

assign select_ln57_2_fu_649_p3 = ((icmp_ln57_3_fu_643_p2[0:0] === 1'b1) ? output_3_0_fu_144 : select_ln57_1_fu_635_p3);

assign select_ln57_3_fu_657_p3 = ((icmp_ln57_1_fu_615_p2[0:0] === 1'b1) ? 32'd0 : output_2_0_fu_140);

assign select_ln57_4_fu_665_p3 = ((icmp_ln57_2_fu_629_p2[0:0] === 1'b1) ? output_2_0_fu_140 : select_ln57_3_fu_657_p3);

assign select_ln57_5_fu_673_p3 = ((icmp_ln57_3_fu_643_p2[0:0] === 1'b1) ? output_2_0_fu_140 : select_ln57_4_fu_665_p3);

assign select_ln57_6_fu_681_p3 = ((icmp_ln57_2_fu_629_p2[0:0] === 1'b1) ? 32'd0 : output_1_0_fu_136);

assign select_ln57_7_fu_689_p3 = ((icmp_ln57_3_fu_643_p2[0:0] === 1'b1) ? output_1_0_fu_136 : select_ln57_6_fu_681_p3);

assign select_ln57_8_fu_697_p3 = ((icmp_ln57_3_fu_643_p2[0:0] === 1'b1) ? 32'd0 : output_0_0_fu_132);

assign select_ln57_fu_621_p3 = ((icmp_ln57_1_fu_615_p2[0:0] === 1'b1) ? output_3_0_fu_144 : 32'd0);

assign sext_ln100_1_fu_987_p1 = $signed(add_ln100_1_fu_982_p2);

assign sext_ln100_fu_962_p1 = $signed(add_ln100_fu_957_p2);

assign sext_ln127_1_fu_1186_p1 = $signed(add_ln127_1_fu_1181_p2);

assign sext_ln127_fu_1141_p1 = $signed(add_ln127_fu_1136_p2);

assign sub_ln100_fu_936_p2 = (zext_ln100_2_fu_920_p1 - zext_ln100_3_fu_932_p1);

assign sub_ln127_fu_1081_p2 = (tmp_s_fu_1061_p3 - zext_ln127_2_fu_1077_p1);

assign tmp_10_fu_1069_p3 = {{j4_0_reg_478}, {4'd0}};

assign tmp_3_fu_912_p3 = {{j1_0_reg_444}, {7'd0}};

assign tmp_4_fu_1002_p4 = {{bitcast_ln102_fu_998_p1[30:23]}};

assign tmp_8_fu_1225_p5 = i7_0_reg_511[1:0];

assign tmp_9_fu_924_p3 = {{j1_0_reg_444}, {4'd0}};

assign tmp_fu_848_p4 = {{bitcast_ln88_fu_844_p1[30:23]}};

assign tmp_s_fu_1061_p3 = {{j4_0_reg_478}, {7'd0}};

assign trunc_ln102_fu_1012_p1 = bitcast_ln102_fu_998_p1[22:0];

assign trunc_ln124_fu_1087_p1 = j4_0_reg_478[1:0];

assign trunc_ln134_fu_1221_p1 = i7_0_reg_511[1:0];

assign trunc_ln88_fu_858_p1 = bitcast_ln88_fu_844_p1[22:0];

assign write_output_data_fu_1291_p5 = i8_0_reg_522[1:0];

assign zext_ln100_1_fu_973_p1 = or_ln98_fu_967_p2;

assign zext_ln100_2_fu_920_p1 = tmp_3_fu_912_p3;

assign zext_ln100_3_fu_932_p1 = tmp_9_fu_924_p3;

assign zext_ln100_4_fu_953_p1 = k3_0_0_reg_466;

assign zext_ln100_5_fu_978_p1 = or_ln98_fu_967_p2;

assign zext_ln100_fu_948_p1 = k3_0_0_reg_466;

assign zext_ln127_1_fu_1172_p1 = or_ln125_fu_1166_p2;

assign zext_ln127_2_fu_1077_p1 = tmp_10_fu_1069_p3;

assign zext_ln127_3_fu_1132_p1 = k6_0_0_reg_499;

assign zext_ln127_4_fu_1177_p1 = or_ln125_fu_1166_p2;

assign zext_ln127_fu_1127_p1 = k6_0_0_reg_499;

assign zext_ln62_fu_748_p1 = i_0_reg_388;

assign zext_ln80_fu_771_p1 = j_0_reg_399;

assign zext_ln84_1_fu_813_p1 = or_ln81_fu_807_p2;

assign zext_ln84_fu_782_p1 = k_0_0_reg_432;

assign zext_ln85_1_fu_797_p1 = add_ln85_fu_791_p2;

assign zext_ln85_2_fu_818_p1 = or_ln81_fu_807_p2;

assign zext_ln85_3_fu_828_p1 = add_ln85_1_fu_822_p2;

assign zext_ln85_fu_787_p1 = k_0_0_reg_432;

assign zext_ln97_fu_907_p1 = j1_0_reg_444;

always @ (posedge ap_clk) begin
    zext_ln80_reg_1386[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln97_reg_1447[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    sub_ln100_reg_1481[3:0] <= 4'b0000;
    sub_ln127_reg_1528[3:0] <= 4'b0000;
end

endmodule //mlp_HLS
