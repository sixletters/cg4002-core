-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mlp_HLS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    S_AXIS_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    S_AXIS_TVALID : IN STD_LOGIC;
    S_AXIS_TREADY : OUT STD_LOGIC;
    S_AXIS_TLAST : IN STD_LOGIC;
    M_AXIS_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    M_AXIS_TVALID : OUT STD_LOGIC;
    M_AXIS_TREADY : IN STD_LOGIC;
    M_AXIS_TLAST : OUT STD_LOGIC );
end;


architecture behav of mlp_HLS is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mlp_HLS,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.770400,HLS_SYN_LAT=124740,HLS_SYN_TPT=none,HLS_SYN_MEM=43,HLS_SYN_DSP=5,HLS_SYN_FF=1487,HLS_SYN_LUT=1978,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (51 downto 0) := "0000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (51 downto 0) := "0000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (51 downto 0) := "0000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (51 downto 0) := "0000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (51 downto 0) := "0000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (51 downto 0) := "0000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (51 downto 0) := "0001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (51 downto 0) := "0010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (51 downto 0) := "0100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (51 downto 0) := "1000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv6_36 : STD_LOGIC_VECTOR (5 downto 0) := "110110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv13_36 : STD_LOGIC_VECTOR (12 downto 0) := "0000000110110";
    constant ap_const_lv7_70 : STD_LOGIC_VECTOR (6 downto 0) := "1110000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_3CD1708C : STD_LOGIC_VECTOR (31 downto 0) := "00111100110100010111000010001100";
    constant ap_const_lv32_3A2F9043 : STD_LOGIC_VECTOR (31 downto 0) := "00111010001011111001000001000011";
    constant ap_const_lv32_BC219C6E : STD_LOGIC_VECTOR (31 downto 0) := "10111100001000011001110001101110";
    constant ap_const_lv32_BCA1D39C : STD_LOGIC_VECTOR (31 downto 0) := "10111100101000011101001110011100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal layer1Bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer1Bias_ce0 : STD_LOGIC;
    signal layer1Bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer1Weight_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal layer1Weight_ce0 : STD_LOGIC;
    signal layer1Weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer2Bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer2Bias_ce0 : STD_LOGIC;
    signal layer2Bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer2Weight_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal layer2Weight_ce0 : STD_LOGIC;
    signal layer2Weight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputWeight_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal outputWeight_ce0 : STD_LOGIC;
    signal outputWeight_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln60_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal M_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal icmp_ln138_fu_1263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal training_input_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_551 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal reg_555 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_540_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_560 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_533_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal hidden1Layer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_577 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal reg_582 : STD_LOGIC_VECTOR (31 downto 0);
    signal hidden2Layer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_587 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_fu_609_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln57_2_fu_649_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln57_2_reg_1342 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln57_5_fu_673_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln57_5_reg_1347 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln57_7_fu_689_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln57_7_reg_1352 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln57_8_fu_697_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln57_8_reg_1357 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_737_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal add_ln79_fu_753_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln79_reg_1373 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_fu_765_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_1381 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln80_fu_771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln80_reg_1386 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln79_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln81_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln85_fu_802_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln81_fu_833_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln81_reg_1429 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln85_1_fu_839_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j_2_fu_901_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_2_reg_1442 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zext_ln97_fu_907_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln97_reg_1447 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln96_fu_895_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln100_fu_936_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln100_reg_1481 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln98_fu_942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln98_fu_992_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln98_reg_1515 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_fu_1055_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_1523 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal sub_ln127_fu_1081_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln127_reg_1528 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln123_fu_1049_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln124_fu_1087_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln124_reg_1534 : STD_LOGIC_VECTOR (1 downto 0);
    signal activation_2_fu_1091_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal icmp_ln125_fu_1121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln125_fu_1191_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln125_reg_1594 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_fu_1203_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal i_3_fu_1269_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_1613 : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_M_AXIS_V_data_U_apdone_blk : STD_LOGIC;
    signal ap_block_state51_io : BOOLEAN;
    signal write_output_data_fu_1291_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal training_input_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal training_input_ce0 : STD_LOGIC;
    signal training_input_we0 : STD_LOGIC;
    signal hidden1Layer_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hidden1Layer_ce0 : STD_LOGIC;
    signal hidden1Layer_we0 : STD_LOGIC;
    signal hidden1Layer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal hidden2Layer_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal hidden2Layer_ce0 : STD_LOGIC;
    signal hidden2Layer_we0 : STD_LOGIC;
    signal hidden2Layer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln57_reg_377 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln57_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_388 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_reg_399 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal phi_mul_reg_410 : STD_LOGIC_VECTOR (12 downto 0);
    signal activation_0_0_reg_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_0_reg_432 : STD_LOGIC_VECTOR (5 downto 0);
    signal j1_0_reg_444 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal activation2_0_0_reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal k3_0_0_reg_466 : STD_LOGIC_VECTOR (6 downto 0);
    signal j4_0_reg_478 : STD_LOGIC_VECTOR (2 downto 0);
    signal outputLayer_0_reg_489 : STD_LOGIC_VECTOR (31 downto 0);
    signal k6_0_0_reg_499 : STD_LOGIC_VECTOR (6 downto 0);
    signal i7_0_reg_511 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln132_fu_1197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i8_0_reg_522 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln62_fu_748_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln85_1_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_fu_782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln85_3_fu_828_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_1_fu_813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln100_fu_962_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_fu_948_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln100_1_fu_987_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_1_fu_973_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln127_fu_1141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln127_fu_1127_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln127_1_fu_1186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln127_1_fu_1172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_0_0_fu_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_1_0_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_2_0_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_3_0_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputLayer_3_fu_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputLayer_3_1_fu_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputLayer_3_2_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal outputLayer_3_3_fu_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_3_fu_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_0_fu_1239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln134_fu_1221_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_3_1_fu_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_3_3_fu_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_3_2_fu_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_533_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_540_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_544_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln57_1_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_2_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln57_fu_621_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln57_3_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln57_1_fu_635_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln57_3_fu_657_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln57_4_fu_665_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln57_6_fu_681_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln85_fu_787_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln85_fu_791_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln81_fu_807_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln85_2_fu_818_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln85_1_fu_822_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln88_fu_844_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_848_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln88_fu_858_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln88_1_fu_868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln88_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln88_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln88_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_912_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_fu_924_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln100_2_fu_920_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln100_3_fu_932_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln100_4_fu_953_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln100_fu_957_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln98_fu_967_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln100_5_fu_978_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln100_1_fu_982_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal bitcast_ln102_fu_998_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1002_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln102_fu_1012_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln102_1_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln102_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_fu_1034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_1069_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_1061_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln127_2_fu_1077_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal activation_2_fu_1091_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln127_3_fu_1132_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln127_fu_1136_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln125_fu_1166_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln127_4_fu_1177_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln127_1_fu_1181_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_1225_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_1225_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal write_output_data_fu_1291_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (51 downto 0);
    signal regslice_both_S_AXIS_V_data_U_apdone_blk : STD_LOGIC;
    signal S_AXIS_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_TVALID_int : STD_LOGIC;
    signal S_AXIS_TREADY_int : STD_LOGIC;
    signal regslice_both_S_AXIS_V_data_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_S_AXIS_V_last_U_apdone_blk : STD_LOGIC;
    signal S_AXIS_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_S_AXIS_V_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_S_AXIS_V_last_U_ack_in : STD_LOGIC;
    signal M_AXIS_TVALID_int : STD_LOGIC;
    signal M_AXIS_TREADY_int : STD_LOGIC;
    signal regslice_both_M_AXIS_V_data_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_M_AXIS_V_last_U_apdone_blk : STD_LOGIC;
    signal M_AXIS_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_M_AXIS_V_last_U_vld_out : STD_LOGIC;

    component mlp_HLS_fadd_32nshbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_HLS_fmul_32nsibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_HLS_fcmp_32nsjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mlp_HLS_mux_42_32kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_HLS_layer1Bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_HLS_layer1Weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_HLS_layer2Bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_HLS_layer2Weicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_HLS_outputWeidEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_HLS_training_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mlp_HLS_hidden1LafYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_both_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    layer1Bias_U : component mlp_HLS_layer1Bias
    generic map (
        DataWidth => 32,
        AddressRange => 112,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layer1Bias_address0,
        ce0 => layer1Bias_ce0,
        q0 => layer1Bias_q0);

    layer1Weight_U : component mlp_HLS_layer1Weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 6048,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layer1Weight_address0,
        ce0 => layer1Weight_ce0,
        q0 => layer1Weight_q0);

    layer2Bias_U : component mlp_HLS_layer2Bias
    generic map (
        DataWidth => 32,
        AddressRange => 112,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layer2Bias_address0,
        ce0 => layer2Bias_ce0,
        q0 => layer2Bias_q0);

    layer2Weight_U : component mlp_HLS_layer2Weicud
    generic map (
        DataWidth => 32,
        AddressRange => 12544,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layer2Weight_address0,
        ce0 => layer2Weight_ce0,
        q0 => layer2Weight_q0);

    outputWeight_U : component mlp_HLS_outputWeidEe
    generic map (
        DataWidth => 32,
        AddressRange => 448,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => outputWeight_address0,
        ce0 => outputWeight_ce0,
        q0 => outputWeight_q0);

    training_input_U : component mlp_HLS_training_eOg
    generic map (
        DataWidth => 32,
        AddressRange => 54,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => training_input_address0,
        ce0 => training_input_ce0,
        we0 => training_input_we0,
        d0 => S_AXIS_TDATA_int,
        q0 => training_input_q0);

    hidden1Layer_U : component mlp_HLS_hidden1LafYi
    generic map (
        DataWidth => 32,
        AddressRange => 112,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hidden1Layer_address0,
        ce0 => hidden1Layer_ce0,
        we0 => hidden1Layer_we0,
        d0 => hidden1Layer_d0,
        q0 => hidden1Layer_q0);

    hidden2Layer_U : component mlp_HLS_hidden1LafYi
    generic map (
        DataWidth => 32,
        AddressRange => 112,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hidden2Layer_address0,
        ce0 => hidden2Layer_ce0,
        we0 => hidden2Layer_we0,
        d0 => hidden2Layer_d0,
        q0 => hidden2Layer_q0);

    mlp_HLS_fadd_32nshbi_U1 : component mlp_HLS_fadd_32nshbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_533_p0,
        din1 => reg_560,
        ce => ap_const_logic_1,
        dout => grp_fu_533_p2);

    mlp_HLS_fmul_32nsibs_U2 : component mlp_HLS_fmul_32nsibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_540_p0,
        din1 => grp_fu_540_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_540_p2);

    mlp_HLS_fcmp_32nsjbC_U3 : component mlp_HLS_fcmp_32nsjbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_544_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_544_p2);

    mlp_HLS_mux_42_32kbM_U4 : component mlp_HLS_mux_42_32kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3CD1708C,
        din1 => ap_const_lv32_3A2F9043,
        din2 => ap_const_lv32_BC219C6E,
        din3 => ap_const_lv32_BCA1D39C,
        din4 => activation_2_fu_1091_p5,
        dout => activation_2_fu_1091_p6);

    mlp_HLS_mux_42_32kbM_U5 : component mlp_HLS_mux_42_32kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => outputLayer_3_fu_160,
        din1 => outputLayer_3_1_fu_164,
        din2 => outputLayer_3_2_fu_168,
        din3 => outputLayer_3_3_fu_172,
        din4 => tmp_8_fu_1225_p5,
        dout => tmp_8_fu_1225_p6);

    mlp_HLS_mux_42_32kbM_U6 : component mlp_HLS_mux_42_32kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => output_3_fu_176,
        din1 => output_3_1_fu_180,
        din2 => output_3_3_fu_184,
        din3 => output_3_2_fu_188,
        din4 => write_output_data_fu_1291_p5,
        dout => write_output_data_fu_1291_p6);

    regslice_both_S_AXIS_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => S_AXIS_TDATA,
        vld_in => S_AXIS_TVALID,
        ack_in => regslice_both_S_AXIS_V_data_U_ack_in,
        data_out => S_AXIS_TDATA_int,
        vld_out => S_AXIS_TVALID_int,
        ack_out => S_AXIS_TREADY_int,
        apdone_blk => regslice_both_S_AXIS_V_data_U_apdone_blk);

    regslice_both_w1_S_AXIS_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => S_AXIS_TLAST,
        vld_in => S_AXIS_TVALID,
        ack_in => regslice_both_w1_S_AXIS_V_last_U_ack_in,
        data_out => S_AXIS_TLAST_int,
        vld_out => regslice_both_w1_S_AXIS_V_last_U_vld_out,
        ack_out => S_AXIS_TREADY_int,
        apdone_blk => regslice_both_w1_S_AXIS_V_last_U_apdone_blk);

    regslice_both_M_AXIS_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => write_output_data_fu_1291_p6,
        vld_in => M_AXIS_TVALID_int,
        ack_in => M_AXIS_TREADY_int,
        data_out => M_AXIS_TDATA,
        vld_out => regslice_both_M_AXIS_V_data_U_vld_out,
        ack_out => M_AXIS_TREADY,
        apdone_blk => regslice_both_M_AXIS_V_data_U_apdone_blk);

    regslice_both_w1_M_AXIS_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => M_AXIS_TLAST_int,
        vld_in => M_AXIS_TVALID_int,
        ack_in => regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy,
        data_out => M_AXIS_TLAST,
        vld_out => regslice_both_w1_M_AXIS_V_last_U_vld_out,
        ack_out => M_AXIS_TREADY,
        apdone_blk => regslice_both_w1_M_AXIS_V_last_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    activation2_0_0_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                activation2_0_0_reg_456 <= grp_fu_533_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                activation2_0_0_reg_456 <= layer2Bias_q0;
            end if; 
        end if;
    end process;

    activation_0_0_reg_422_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                activation_0_0_reg_422 <= grp_fu_533_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                activation_0_0_reg_422 <= layer1Bias_q0;
            end if; 
        end if;
    end process;

    i7_0_reg_511_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state50) and (icmp_ln132_fu_1197_p2 = ap_const_lv1_0))) then 
                i7_0_reg_511 <= i_2_fu_1203_p2;
            elsif (((icmp_ln123_fu_1049_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                i7_0_reg_511 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i8_0_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln132_fu_1197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                i8_0_reg_522 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state52) and (ap_const_logic_1 = M_AXIS_TREADY_int))) then 
                i8_0_reg_522 <= i_3_reg_1613;
            end if; 
        end if;
    end process;

    i_0_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_705_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_388 <= ap_const_lv6_0;
            elsif ((not(((ap_const_logic_0 = S_AXIS_TVALID_int) and (icmp_ln60_fu_731_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln60_fu_731_p2 = ap_const_lv1_0))) then 
                i_0_reg_388 <= i_fu_737_p2;
            end if; 
        end if;
    end process;

    j1_0_reg_444_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_759_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j1_0_reg_444 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                j1_0_reg_444 <= j_2_reg_1442;
            end if; 
        end if;
    end process;

    j4_0_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln125_fu_1121_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                j4_0_reg_478 <= j_1_reg_1523;
            elsif (((icmp_ln96_fu_895_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                j4_0_reg_478 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = S_AXIS_TVALID_int) and (icmp_ln60_fu_731_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln60_fu_731_p2 = ap_const_lv1_1))) then 
                j_0_reg_399 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                j_0_reg_399 <= j_reg_1381;
            end if; 
        end if;
    end process;

    k3_0_0_reg_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                k3_0_0_reg_466 <= add_ln98_reg_1515;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                k3_0_0_reg_466 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k6_0_0_reg_499_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                k6_0_0_reg_499 <= add_ln125_reg_1594;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln123_fu_1049_p2 = ap_const_lv1_0))) then 
                k6_0_0_reg_499 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k_0_0_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                k_0_0_reg_432 <= add_ln81_reg_1429;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_0_0_reg_432 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    outputLayer_0_reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                outputLayer_0_reg_489 <= grp_fu_533_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln123_fu_1049_p2 = ap_const_lv1_0))) then 
                outputLayer_0_reg_489 <= activation_2_fu_1091_p6;
            end if; 
        end if;
    end process;

    output_3_1_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln134_fu_1221_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state50) and (icmp_ln132_fu_1197_p2 = ap_const_lv1_0))) then 
                output_3_1_fu_180 <= output_0_fu_1239_p1;
            elsif (((icmp_ln123_fu_1049_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                output_3_1_fu_180 <= select_ln57_7_reg_1352;
            end if; 
        end if;
    end process;

    output_3_2_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln134_fu_1221_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state50) and (icmp_ln132_fu_1197_p2 = ap_const_lv1_0))) then 
                output_3_2_fu_188 <= output_0_fu_1239_p1;
            elsif (((icmp_ln123_fu_1049_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                output_3_2_fu_188 <= select_ln57_2_reg_1342;
            end if; 
        end if;
    end process;

    output_3_3_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln134_fu_1221_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state50) and (icmp_ln132_fu_1197_p2 = ap_const_lv1_0))) then 
                output_3_3_fu_184 <= output_0_fu_1239_p1;
            elsif (((icmp_ln123_fu_1049_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                output_3_3_fu_184 <= select_ln57_5_reg_1347;
            end if; 
        end if;
    end process;

    output_3_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln134_fu_1221_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state50) and (icmp_ln132_fu_1197_p2 = ap_const_lv1_0))) then 
                output_3_fu_176 <= output_0_fu_1239_p1;
            elsif (((icmp_ln123_fu_1049_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                output_3_fu_176 <= select_ln57_8_reg_1357;
            end if; 
        end if;
    end process;

    phi_ln57_reg_377_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln57_fu_705_p2 = ap_const_lv1_0))) then 
                phi_ln57_reg_377 <= add_ln57_fu_609_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                phi_ln57_reg_377 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = S_AXIS_TVALID_int) and (icmp_ln60_fu_731_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln60_fu_731_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_410 <= ap_const_lv13_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                phi_mul_reg_410 <= add_ln79_reg_1373;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                add_ln125_reg_1594 <= add_ln125_fu_1191_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln79_reg_1373 <= add_ln79_fu_753_p2;
                j_reg_1381 <= j_fu_765_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln81_reg_1429 <= add_ln81_fu_833_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                add_ln98_reg_1515 <= add_ln98_fu_992_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((regslice_both_M_AXIS_V_data_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state51_io))) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                i_3_reg_1613 <= i_3_fu_1269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                j_1_reg_1523 <= j_1_fu_1055_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                j_2_reg_1442 <= j_2_fu_901_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln125_fu_1121_p2 = ap_const_lv1_1) and (trunc_ln124_reg_1534 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                outputLayer_3_1_fu_164 <= outputLayer_0_reg_489;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln125_fu_1121_p2 = ap_const_lv1_1) and (trunc_ln124_reg_1534 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                outputLayer_3_2_fu_168 <= outputLayer_0_reg_489;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln125_fu_1121_p2 = ap_const_lv1_1) and (trunc_ln124_reg_1534 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                outputLayer_3_3_fu_172 <= outputLayer_0_reg_489;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln125_fu_1121_p2 = ap_const_lv1_1) and (trunc_ln124_reg_1534 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                outputLayer_3_fu_160 <= outputLayer_0_reg_489;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                output_0_0_fu_132 <= select_ln57_8_fu_697_p3;
                output_1_0_fu_136 <= select_ln57_7_fu_689_p3;
                output_2_0_fu_140 <= select_ln57_5_fu_673_p3;
                output_3_0_fu_144 <= select_ln57_2_fu_649_p3;
                select_ln57_2_reg_1342 <= select_ln57_2_fu_649_p3;
                select_ln57_5_reg_1347 <= select_ln57_5_fu_673_p3;
                select_ln57_7_reg_1352 <= select_ln57_7_fu_689_p3;
                select_ln57_8_reg_1357 <= select_ln57_8_fu_697_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_551 <= training_input_q0;
                reg_555 <= layer1Weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_560 <= grp_fu_540_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_565 <= grp_fu_533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state23))) then
                reg_577 <= hidden1Layer_q0;
                reg_582 <= layer2Weight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38))) then
                reg_587 <= hidden2Layer_q0;
                reg_592 <= outputWeight_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                    sub_ln100_reg_1481(14 downto 4) <= sub_ln100_fu_936_p2(14 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (icmp_ln123_fu_1049_p2 = ap_const_lv1_0))) then
                    sub_ln127_reg_1528(9 downto 4) <= sub_ln127_fu_1081_p2(9 downto 4);
                trunc_ln124_reg_1534 <= trunc_ln124_fu_1087_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln79_fu_759_p2 = ap_const_lv1_0))) then
                    zext_ln80_reg_1386(6 downto 0) <= zext_ln80_fu_771_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln96_fu_895_p2 = ap_const_lv1_0))) then
                    zext_ln97_reg_1447(6 downto 0) <= zext_ln97_fu_907_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln80_reg_1386(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln97_reg_1447(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    sub_ln100_reg_1481(3 downto 0) <= "0000";
    sub_ln127_reg_1528(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state3, icmp_ln60_fu_731_p2, ap_CS_fsm_state51, icmp_ln138_fu_1263_p2, ap_CS_fsm_state52, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln79_fu_759_p2, ap_CS_fsm_state6, icmp_ln81_fu_776_p2, ap_CS_fsm_state20, icmp_ln96_fu_895_p2, ap_CS_fsm_state22, icmp_ln98_fu_942_p2, ap_CS_fsm_state36, icmp_ln123_fu_1049_p2, ap_CS_fsm_state37, icmp_ln125_fu_1121_p2, ap_CS_fsm_state50, regslice_both_M_AXIS_V_data_U_apdone_blk, ap_block_state51_io, icmp_ln57_fu_705_p2, icmp_ln132_fu_1197_p2, S_AXIS_TVALID_int, M_AXIS_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln57_fu_705_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((ap_const_logic_0 = S_AXIS_TVALID_int) and (icmp_ln60_fu_731_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln60_fu_731_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((ap_const_logic_0 = S_AXIS_TVALID_int) and (icmp_ln60_fu_731_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln60_fu_731_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln79_fu_759_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln81_fu_776_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln96_fu_895_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln98_fu_942_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state36 => 
                if (((icmp_ln123_fu_1049_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                if (((icmp_ln125_fu_1121_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state50 => 
                if (((icmp_ln132_fu_1197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if ((not(((regslice_both_M_AXIS_V_data_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state51_io))) and (ap_const_logic_1 = ap_CS_fsm_state51) and (icmp_ln138_fu_1263_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((regslice_both_M_AXIS_V_data_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state51_io))) and (ap_const_logic_1 = ap_CS_fsm_state51) and (icmp_ln138_fu_1263_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state52) and (ap_const_logic_1 = M_AXIS_TREADY_int))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    M_AXIS_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state51, icmp_ln138_fu_1263_p2, ap_CS_fsm_state52, M_AXIS_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or ((ap_const_logic_1 = ap_CS_fsm_state51) and (icmp_ln138_fu_1263_p2 = ap_const_lv1_0)))) then 
            M_AXIS_TDATA_blk_n <= M_AXIS_TREADY_int;
        else 
            M_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    M_AXIS_TLAST_int <= '1' when (i8_0_reg_522 = ap_const_lv3_3) else '0';
    M_AXIS_TVALID <= regslice_both_M_AXIS_V_data_U_vld_out;

    M_AXIS_TVALID_int_assign_proc : process(ap_CS_fsm_state51, icmp_ln138_fu_1263_p2, regslice_both_M_AXIS_V_data_U_apdone_blk, ap_block_state51_io)
    begin
        if ((not(((regslice_both_M_AXIS_V_data_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state51_io))) and (ap_const_logic_1 = ap_CS_fsm_state51) and (icmp_ln138_fu_1263_p2 = ap_const_lv1_0))) then 
            M_AXIS_TVALID_int <= ap_const_logic_1;
        else 
            M_AXIS_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, icmp_ln60_fu_731_p2, S_AXIS_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln60_fu_731_p2 = ap_const_lv1_0))) then 
            S_AXIS_TDATA_blk_n <= S_AXIS_TVALID_int;
        else 
            S_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    S_AXIS_TREADY_assign_proc : process(S_AXIS_TVALID, regslice_both_S_AXIS_V_data_U_ack_in)
    begin
        if (((ap_const_logic_1 = S_AXIS_TVALID) and (regslice_both_S_AXIS_V_data_U_ack_in = ap_const_logic_1))) then 
            S_AXIS_TREADY <= ap_const_logic_1;
        else 
            S_AXIS_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_TREADY_int_assign_proc : process(ap_CS_fsm_state3, icmp_ln60_fu_731_p2, S_AXIS_TVALID_int)
    begin
        if ((not(((ap_const_logic_0 = S_AXIS_TVALID_int) and (icmp_ln60_fu_731_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln60_fu_731_p2 = ap_const_lv1_0))) then 
            S_AXIS_TREADY_int <= ap_const_logic_1;
        else 
            S_AXIS_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    activation_2_fu_1091_p5 <= j4_0_reg_478(2 - 1 downto 0);
    add_ln100_1_fu_982_p2 <= std_logic_vector(unsigned(sub_ln100_reg_1481) + unsigned(zext_ln100_5_fu_978_p1));
    add_ln100_fu_957_p2 <= std_logic_vector(unsigned(sub_ln100_reg_1481) + unsigned(zext_ln100_4_fu_953_p1));
    add_ln125_fu_1191_p2 <= std_logic_vector(unsigned(k6_0_0_reg_499) + unsigned(ap_const_lv7_2));
    add_ln127_1_fu_1181_p2 <= std_logic_vector(unsigned(sub_ln127_reg_1528) + unsigned(zext_ln127_4_fu_1177_p1));
    add_ln127_fu_1136_p2 <= std_logic_vector(unsigned(sub_ln127_reg_1528) + unsigned(zext_ln127_3_fu_1132_p1));
    add_ln57_fu_609_p2 <= std_logic_vector(unsigned(phi_ln57_reg_377) + unsigned(ap_const_lv2_1));
    add_ln79_fu_753_p2 <= std_logic_vector(unsigned(phi_mul_reg_410) + unsigned(ap_const_lv13_36));
    add_ln81_fu_833_p2 <= std_logic_vector(unsigned(k_0_0_reg_432) + unsigned(ap_const_lv6_2));
    add_ln85_1_fu_822_p2 <= std_logic_vector(unsigned(phi_mul_reg_410) + unsigned(zext_ln85_2_fu_818_p1));
    add_ln85_fu_791_p2 <= std_logic_vector(unsigned(phi_mul_reg_410) + unsigned(zext_ln85_fu_787_p1));
    add_ln98_fu_992_p2 <= std_logic_vector(unsigned(k3_0_0_reg_466) + unsigned(ap_const_lv7_2));
    and_ln102_fu_1034_p2 <= (or_ln102_fu_1028_p2 and grp_fu_544_p2);
    and_ln88_fu_880_p2 <= (or_ln88_fu_874_p2 and grp_fu_544_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state3_assign_proc : process(icmp_ln60_fu_731_p2, S_AXIS_TVALID_int)
    begin
                ap_block_state3 <= ((ap_const_logic_0 = S_AXIS_TVALID_int) and (icmp_ln60_fu_731_p2 = ap_const_lv1_0));
    end process;


    ap_block_state51_io_assign_proc : process(icmp_ln138_fu_1263_p2, M_AXIS_TREADY_int)
    begin
                ap_block_state51_io <= ((ap_const_logic_0 = M_AXIS_TREADY_int) and (icmp_ln138_fu_1263_p2 = ap_const_lv1_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln102_fu_998_p1 <= activation2_0_0_reg_456;
    bitcast_ln85_1_fu_839_p1 <= reg_551;
    bitcast_ln85_fu_802_p1 <= reg_551;
    bitcast_ln88_fu_844_p1 <= activation_0_0_reg_422;

    grp_fu_533_p0_assign_proc : process(ap_CS_fsm_state11, reg_565, ap_CS_fsm_state27, ap_CS_fsm_state42, activation_0_0_reg_422, activation2_0_0_reg_456, outputLayer_0_reg_489, ap_CS_fsm_state15, ap_CS_fsm_state31, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_533_p0 <= outputLayer_0_reg_489;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_533_p0 <= activation2_0_0_reg_456;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_fu_533_p0 <= reg_565;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_533_p0 <= activation_0_0_reg_422;
        else 
            grp_fu_533_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_540_p0_assign_proc : process(reg_577, reg_587, bitcast_ln85_fu_802_p1, ap_CS_fsm_state8, bitcast_ln85_1_fu_839_p1, ap_CS_fsm_state12, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state39, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            grp_fu_540_p0 <= reg_587;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_fu_540_p0 <= reg_577;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_540_p0 <= bitcast_ln85_1_fu_839_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_540_p0 <= bitcast_ln85_fu_802_p1;
        else 
            grp_fu_540_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_540_p1_assign_proc : process(reg_555, reg_582, reg_592, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state39, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            grp_fu_540_p1 <= reg_592;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            grp_fu_540_p1 <= reg_582;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_540_p1 <= reg_555;
        else 
            grp_fu_540_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_544_p0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state22, activation_0_0_reg_422, activation2_0_0_reg_456)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_544_p0 <= activation2_0_0_reg_456;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_544_p0 <= activation_0_0_reg_422;
        else 
            grp_fu_544_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hidden1Layer_address0_assign_proc : process(ap_CS_fsm_state26, zext_ln80_reg_1386, ap_CS_fsm_state22, ap_CS_fsm_state19, zext_ln100_fu_948_p1, zext_ln100_1_fu_973_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            hidden1Layer_address0 <= zext_ln100_1_fu_973_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            hidden1Layer_address0 <= zext_ln100_fu_948_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            hidden1Layer_address0 <= zext_ln80_reg_1386(7 - 1 downto 0);
        else 
            hidden1Layer_address0 <= "XXXXXXX";
        end if; 
    end process;


    hidden1Layer_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            hidden1Layer_ce0 <= ap_const_logic_1;
        else 
            hidden1Layer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hidden1Layer_d0 <= 
        ap_const_lv32_0 when (and_ln88_fu_880_p2(0) = '1') else 
        activation_0_0_reg_422;

    hidden1Layer_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            hidden1Layer_we0 <= ap_const_logic_1;
        else 
            hidden1Layer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hidden2Layer_address0_assign_proc : process(ap_CS_fsm_state41, zext_ln97_reg_1447, ap_CS_fsm_state37, ap_CS_fsm_state35, zext_ln127_fu_1127_p1, zext_ln127_1_fu_1172_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            hidden2Layer_address0 <= zext_ln127_1_fu_1172_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            hidden2Layer_address0 <= zext_ln127_fu_1127_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            hidden2Layer_address0 <= zext_ln97_reg_1447(7 - 1 downto 0);
        else 
            hidden2Layer_address0 <= "XXXXXXX";
        end if; 
    end process;


    hidden2Layer_ce0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state37, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            hidden2Layer_ce0 <= ap_const_logic_1;
        else 
            hidden2Layer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hidden2Layer_d0 <= 
        ap_const_lv32_0 when (and_ln102_fu_1034_p2(0) = '1') else 
        activation2_0_0_reg_456;

    hidden2Layer_we0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            hidden2Layer_we0 <= ap_const_logic_1;
        else 
            hidden2Layer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_1203_p2 <= std_logic_vector(unsigned(i7_0_reg_511) + unsigned(ap_const_lv3_1));
    i_3_fu_1269_p2 <= std_logic_vector(unsigned(i8_0_reg_522) + unsigned(ap_const_lv3_1));
    i_fu_737_p2 <= std_logic_vector(unsigned(i_0_reg_388) + unsigned(ap_const_lv6_1));
    icmp_ln102_1_fu_1022_p2 <= "1" when (trunc_ln102_fu_1012_p1 = ap_const_lv23_0) else "0";
    icmp_ln102_fu_1016_p2 <= "0" when (tmp_4_fu_1002_p4 = ap_const_lv8_FF) else "1";
    icmp_ln123_fu_1049_p2 <= "1" when (j4_0_reg_478 = ap_const_lv3_4) else "0";
    icmp_ln125_fu_1121_p2 <= "1" when (k6_0_0_reg_499 = ap_const_lv7_70) else "0";
    icmp_ln132_fu_1197_p2 <= "1" when (i7_0_reg_511 = ap_const_lv3_4) else "0";
    icmp_ln138_fu_1263_p2 <= "1" when (i8_0_reg_522 = ap_const_lv3_4) else "0";
    icmp_ln57_1_fu_615_p2 <= "1" when (phi_ln57_reg_377 = ap_const_lv2_2) else "0";
    icmp_ln57_2_fu_629_p2 <= "1" when (phi_ln57_reg_377 = ap_const_lv2_1) else "0";
    icmp_ln57_3_fu_643_p2 <= "1" when (phi_ln57_reg_377 = ap_const_lv2_0) else "0";
    icmp_ln57_fu_705_p2 <= "1" when (phi_ln57_reg_377 = ap_const_lv2_3) else "0";
    icmp_ln60_fu_731_p2 <= "1" when (i_0_reg_388 = ap_const_lv6_36) else "0";
    icmp_ln79_fu_759_p2 <= "1" when (j_0_reg_399 = ap_const_lv7_70) else "0";
    icmp_ln81_fu_776_p2 <= "1" when (k_0_0_reg_432 = ap_const_lv6_36) else "0";
    icmp_ln88_1_fu_868_p2 <= "1" when (trunc_ln88_fu_858_p1 = ap_const_lv23_0) else "0";
    icmp_ln88_fu_862_p2 <= "0" when (tmp_fu_848_p4 = ap_const_lv8_FF) else "1";
    icmp_ln96_fu_895_p2 <= "1" when (j1_0_reg_444 = ap_const_lv7_70) else "0";
    icmp_ln98_fu_942_p2 <= "1" when (k3_0_0_reg_466 = ap_const_lv7_70) else "0";
    j_1_fu_1055_p2 <= std_logic_vector(unsigned(j4_0_reg_478) + unsigned(ap_const_lv3_1));
    j_2_fu_901_p2 <= std_logic_vector(unsigned(j1_0_reg_444) + unsigned(ap_const_lv7_1));
    j_fu_765_p2 <= std_logic_vector(unsigned(j_0_reg_399) + unsigned(ap_const_lv7_1));
    layer1Bias_address0 <= zext_ln80_fu_771_p1(7 - 1 downto 0);

    layer1Bias_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            layer1Bias_ce0 <= ap_const_logic_1;
        else 
            layer1Bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1Weight_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state6, zext_ln85_1_fu_797_p1, zext_ln85_3_fu_828_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            layer1Weight_address0 <= zext_ln85_3_fu_828_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            layer1Weight_address0 <= zext_ln85_1_fu_797_p1(13 - 1 downto 0);
        else 
            layer1Weight_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    layer1Weight_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            layer1Weight_ce0 <= ap_const_logic_1;
        else 
            layer1Weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2Bias_address0 <= zext_ln97_fu_907_p1(7 - 1 downto 0);

    layer2Bias_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer2Bias_ce0 <= ap_const_logic_1;
        else 
            layer2Bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2Weight_address0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state22, sext_ln100_fu_962_p1, sext_ln100_1_fu_987_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer2Weight_address0 <= sext_ln100_1_fu_987_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer2Weight_address0 <= sext_ln100_fu_962_p1(14 - 1 downto 0);
        else 
            layer2Weight_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    layer2Weight_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            layer2Weight_ce0 <= ap_const_logic_1;
        else 
            layer2Weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln102_fu_1028_p2 <= (icmp_ln102_fu_1016_p2 or icmp_ln102_1_fu_1022_p2);
    or_ln125_fu_1166_p2 <= (k6_0_0_reg_499 or ap_const_lv7_1);
    or_ln81_fu_807_p2 <= (k_0_0_reg_432 or ap_const_lv6_1);
    or_ln88_fu_874_p2 <= (icmp_ln88_fu_862_p2 or icmp_ln88_1_fu_868_p2);
    or_ln98_fu_967_p2 <= (k3_0_0_reg_466 or ap_const_lv7_1);

    outputWeight_address0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state37, sext_ln127_fu_1141_p1, sext_ln127_1_fu_1186_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            outputWeight_address0 <= sext_ln127_1_fu_1186_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            outputWeight_address0 <= sext_ln127_fu_1141_p1(9 - 1 downto 0);
        else 
            outputWeight_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    outputWeight_ce0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            outputWeight_ce0 <= ap_const_logic_1;
        else 
            outputWeight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_fu_1239_p1 <= tmp_8_fu_1225_p6;
    select_ln57_1_fu_635_p3 <= 
        output_3_0_fu_144 when (icmp_ln57_2_fu_629_p2(0) = '1') else 
        select_ln57_fu_621_p3;
    select_ln57_2_fu_649_p3 <= 
        output_3_0_fu_144 when (icmp_ln57_3_fu_643_p2(0) = '1') else 
        select_ln57_1_fu_635_p3;
    select_ln57_3_fu_657_p3 <= 
        ap_const_lv32_0 when (icmp_ln57_1_fu_615_p2(0) = '1') else 
        output_2_0_fu_140;
    select_ln57_4_fu_665_p3 <= 
        output_2_0_fu_140 when (icmp_ln57_2_fu_629_p2(0) = '1') else 
        select_ln57_3_fu_657_p3;
    select_ln57_5_fu_673_p3 <= 
        output_2_0_fu_140 when (icmp_ln57_3_fu_643_p2(0) = '1') else 
        select_ln57_4_fu_665_p3;
    select_ln57_6_fu_681_p3 <= 
        ap_const_lv32_0 when (icmp_ln57_2_fu_629_p2(0) = '1') else 
        output_1_0_fu_136;
    select_ln57_7_fu_689_p3 <= 
        output_1_0_fu_136 when (icmp_ln57_3_fu_643_p2(0) = '1') else 
        select_ln57_6_fu_681_p3;
    select_ln57_8_fu_697_p3 <= 
        ap_const_lv32_0 when (icmp_ln57_3_fu_643_p2(0) = '1') else 
        output_0_0_fu_132;
    select_ln57_fu_621_p3 <= 
        output_3_0_fu_144 when (icmp_ln57_1_fu_615_p2(0) = '1') else 
        ap_const_lv32_0;
        sext_ln100_1_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln100_1_fu_982_p2),64));

        sext_ln100_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln100_fu_957_p2),64));

        sext_ln127_1_fu_1186_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln127_1_fu_1181_p2),64));

        sext_ln127_fu_1141_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln127_fu_1136_p2),64));

    sub_ln100_fu_936_p2 <= std_logic_vector(unsigned(zext_ln100_2_fu_920_p1) - unsigned(zext_ln100_3_fu_932_p1));
    sub_ln127_fu_1081_p2 <= std_logic_vector(unsigned(tmp_s_fu_1061_p3) - unsigned(zext_ln127_2_fu_1077_p1));
    tmp_10_fu_1069_p3 <= (j4_0_reg_478 & ap_const_lv4_0);
    tmp_3_fu_912_p3 <= (j1_0_reg_444 & ap_const_lv7_0);
    tmp_4_fu_1002_p4 <= bitcast_ln102_fu_998_p1(30 downto 23);
    tmp_8_fu_1225_p5 <= i7_0_reg_511(2 - 1 downto 0);
    tmp_9_fu_924_p3 <= (j1_0_reg_444 & ap_const_lv4_0);
    tmp_fu_848_p4 <= bitcast_ln88_fu_844_p1(30 downto 23);
    tmp_s_fu_1061_p3 <= (j4_0_reg_478 & ap_const_lv7_0);

    training_input_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state6, zext_ln62_fu_748_p1, zext_ln84_fu_782_p1, zext_ln84_1_fu_813_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            training_input_address0 <= zext_ln84_1_fu_813_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            training_input_address0 <= zext_ln84_fu_782_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            training_input_address0 <= zext_ln62_fu_748_p1(6 - 1 downto 0);
        else 
            training_input_address0 <= "XXXXXX";
        end if; 
    end process;


    training_input_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln60_fu_731_p2, ap_CS_fsm_state10, ap_CS_fsm_state6, S_AXIS_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10) or (not(((ap_const_logic_0 = S_AXIS_TVALID_int) and (icmp_ln60_fu_731_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            training_input_ce0 <= ap_const_logic_1;
        else 
            training_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    training_input_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln60_fu_731_p2, S_AXIS_TVALID_int)
    begin
        if ((not(((ap_const_logic_0 = S_AXIS_TVALID_int) and (icmp_ln60_fu_731_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln60_fu_731_p2 = ap_const_lv1_0))) then 
            training_input_we0 <= ap_const_logic_1;
        else 
            training_input_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln102_fu_1012_p1 <= bitcast_ln102_fu_998_p1(23 - 1 downto 0);
    trunc_ln124_fu_1087_p1 <= j4_0_reg_478(2 - 1 downto 0);
    trunc_ln134_fu_1221_p1 <= i7_0_reg_511(2 - 1 downto 0);
    trunc_ln88_fu_858_p1 <= bitcast_ln88_fu_844_p1(23 - 1 downto 0);
    write_output_data_fu_1291_p5 <= i8_0_reg_522(2 - 1 downto 0);
    zext_ln100_1_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln98_fu_967_p2),64));
    zext_ln100_2_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_912_p3),15));
    zext_ln100_3_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_924_p3),15));
    zext_ln100_4_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k3_0_0_reg_466),15));
    zext_ln100_5_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln98_fu_967_p2),15));
    zext_ln100_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k3_0_0_reg_466),64));
    zext_ln127_1_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln125_fu_1166_p2),64));
    zext_ln127_2_fu_1077_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_1069_p3),10));
    zext_ln127_3_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k6_0_0_reg_499),10));
    zext_ln127_4_fu_1177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln125_fu_1166_p2),10));
    zext_ln127_fu_1127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k6_0_0_reg_499),64));
    zext_ln62_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_388),64));
    zext_ln80_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_399),64));
    zext_ln84_1_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln81_fu_807_p2),64));
    zext_ln84_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_432),64));
    zext_ln85_1_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln85_fu_791_p2),64));
    zext_ln85_2_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln81_fu_807_p2),13));
    zext_ln85_3_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln85_1_fu_822_p2),64));
    zext_ln85_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_0_reg_432),13));
    zext_ln97_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_0_reg_444),64));
end behav;
